//MY LIBRARIES
#include "PDG/MyPDGLib.h"
#include "distance.h"

//STL
#include <iostream>
#include <cstddef>
#include <sstream>
#include <vector>
#include <stdexcept>
#include <assert.h>
#include <iterator>
#include <utility> 
#include <math.h>


//root classes
#include <TROOT.h>
#include <TFile.h>
#include <TTree.h>
#include <TBranch.h>
#include <TBits.h>
#include <TObjString.h>
#include <TString.h>
#include <TCanvas.h>
#include <TApplication.h>
#include <TDatabasePDG.h>
#include <TParticlePDG.h>
#include "TH2F.h"
#include "TH1F.h"
#include "TProfile.h"
#include "TCanvas.h"
#include "TStyle.h"
#include "TF1.h"
#include "TLegend.h"
#include "TGaxis.h"
#include "TExec.h"
#include "TGraphPolar.h"
#include "TGraph.h"
#include "TGraphErrors.h"
#include "TGraphPolargram.h"
#include "TMath.h"



int main(int argc, char** argv){
    bool using_new_version = false; // StdHepReScat and G2NeutEvtCode branches available only for versions >= 2.5.1
    const int kNPmax = 10000;

    gStyle->SetCanvasPreferGL(true); //for colors

	std::string print = "", print2 = "", print3 = "", post_vol = "", all_args = "";

	if (argc < 3)
	{
		std::cout << "\n\033[91m Error: at least the rotracker input file name (arg-1) and the post volume rmin (arg-2) must be provided!!! Exiting... \033[39m\n\n";
		return 1;
	}

	for (int args = 2; args < argc; args++)
	{
		all_args = all_args + "_" + argv[args];
	}

	if (all_args.find("-P") != std::string::npos)
	{
		std::cout << "Parameter -P passed => Full event display\n";
		print = "-P";
	}
	if (all_args.find("-Q") != std::string::npos)
	{
		std::cout << "Parameter -Q passed => Verbose rock process\n";
		print2 = "-Q";
	}
	if (all_args.find("-D") != std::string::npos)
	{
		std::cout << "Parameter -D passed => Plots will be displayed\n";
		print3 = "-D";
	}

    std::string Fname = argv[1];
	if (Fname.find(".root") == std::string::npos)
	{
		std::cout << "\n\033[91m Error: invalid rotracker input file!!! Exiting... \033[39m\n\n";
		return 2;
	}

    //post volume name (rock boundary)
    distance d;
    double rock_rmin = atof(argv[2]);
    //post_vol = argv[2];
    post_vol = d.where_is(rock_rmin);
    TString Tpost_vol = argv[2];
    
	TApplication rack("rack",0,0);
    
    TString filename = argv[1];
    std::size_t found = Fname.find_last_of("/\\");
    Fname = Fname.substr(found+1);

    TFile file(filename, "READ");
    TTree * tree = (TTree *) file.Get("gRooTracker");
    assert(tree);

    TBits*      EvtFlags = 0;             // generator-specific event flags
    TObjString* EvtCode = 0;              // generator-specific string with 'event code'
    int         EvtNum;                   // event num.
    double      EvtXSec;                  // cross section for selected event (1E-38 cm2)
    double      EvtDXSec;                 // cross section for selected event kinematics (1E-38 cm2 /{K^n})
    double      EvtWght;                  // weight for that event
    double      EvtProb;                  // probability for that event (given cross section, path lengths, etc)
    double      EvtVtx[4];                // event vertex position in detector coord syst (in geom units)
    int         StdHepN;                  // number of particles in particle array 
    int         StdHepPdg   [kNPmax];     // stdhep-like particle array: pdg codes (& generator specific codes for pseudoparticles)
    int         StdHepStatus[kNPmax];     // stdhep-like particle array: generator-specific status code
    int         StdHepRescat[kNPmax];     // stdhep-like particle array: intranuclear rescattering code [ >= v2.5.1 ]
    double      StdHepX4    [kNPmax][4];  // stdhep-like particle array: 4-x (x, y, z, t) of particle in hit nucleus frame (fm)
    double      StdHepP4    [kNPmax][4];  // stdhep-like particle array: 4-p (px,py,pz,E) of particle in LAB frame (GeV)
    double      StdHepPolz  [kNPmax][3];  // stdhep-like particle array: polarization vector
    int         StdHepFd    [kNPmax];     // stdhep-like particle array: first daughter
    int         StdHepLd    [kNPmax];     // stdhep-like particle array: last  daughter 
    int         StdHepFm    [kNPmax];     // stdhep-like particle array: first mother
    int         StdHepLm    [kNPmax];     // stdhep-like particle array: last  mother
    int         G2NeutEvtCode;            // NEUT code for the current GENIE event [ >= v2.5.1 ]
    int         NuParentPdg;              // parent hadron pdg code
    int         NuParentDecMode;          // parent hadron decay mode
    double      NuParentDecP4 [4];        // parent hadron 4-momentum at decay
    double      NuParentDecX4 [4];        // parent hadron 4-position at decay
    double      NuParentProP4 [4];        // parent hadron 4-momentum at production
    double      NuParentProX4 [4];        // parent hadron 4-position at production
    int         NuParentProNVtx;          // parent hadron vtx id

    // get branches
    TBranch * brEvtFlags        = tree -> GetBranch ("EvtFlags");
    TBranch * brEvtCode         = tree -> GetBranch ("EvtCode");
    TBranch * brEvtNum          = tree -> GetBranch ("EvtNum");
    TBranch * brEvtXSec         = tree -> GetBranch ("EvtXSec");
    TBranch * brEvtDXSec        = tree -> GetBranch ("EvtDXSec");
    TBranch * brEvtWght         = tree -> GetBranch ("EvtWght");
    TBranch * brEvtProb         = tree -> GetBranch ("EvtProb");
    TBranch * brEvtVtx          = tree -> GetBranch ("EvtVtx");
    TBranch * brStdHepN         = tree -> GetBranch ("StdHepN");
    TBranch * brStdHepPdg       = tree -> GetBranch ("StdHepPdg");
    TBranch * brStdHepStatus    = tree -> GetBranch ("StdHepStatus");
    TBranch * brStdHepRescat    = (using_new_version) ? tree -> GetBranch ("StdHepRescat") : 0;
    TBranch * brStdHepX4        = tree -> GetBranch ("StdHepX4");
    TBranch * brStdHepP4        = tree -> GetBranch ("StdHepP4");
    TBranch * brStdHepPolz      = tree -> GetBranch ("StdHepPolz");
    TBranch * brStdHepFd        = tree -> GetBranch ("StdHepFd");
    TBranch * brStdHepLd        = tree -> GetBranch ("StdHepLd");
    TBranch * brStdHepFm        = tree -> GetBranch ("StdHepFm");
    TBranch * brStdHepLm        = tree -> GetBranch ("StdHepLm");
    TBranch * brG2NeutEvtCode   = (using_new_version) ? tree -> GetBranch ("G2NeutEvtCode") : 0;
    TBranch * brNuParentPdg     = tree -> GetBranch ("NuParentPdg");
    TBranch * brNuParentDecMode = tree -> GetBranch ("NuParentDecMode");
    TBranch * brNuParentDecP4   = tree -> GetBranch ("NuParentDecP4");
    TBranch * brNuParentDecX4   = tree -> GetBranch ("NuParentDecX4");
    TBranch * brNuParentProP4   = tree -> GetBranch ("NuParentProP4");     
    TBranch * brNuParentProX4   = tree -> GetBranch ("NuParentProX4");     
    TBranch * brNuParentProNVtx = tree -> GetBranch ("NuParentProNVtx");   

    // set address
    brEvtFlags        -> SetAddress ( &EvtFlags         );
    brEvtCode         -> SetAddress ( &EvtCode          );
    brEvtNum          -> SetAddress ( &EvtNum           );
    brEvtXSec         -> SetAddress ( &EvtXSec          );
    brEvtDXSec        -> SetAddress ( &EvtDXSec         );
    brEvtWght         -> SetAddress ( &EvtWght          );
    brEvtProb         -> SetAddress ( &EvtProb          );
    brEvtVtx          -> SetAddress (  EvtVtx           );
    brStdHepN         -> SetAddress ( &StdHepN          );
    brStdHepPdg       -> SetAddress (  StdHepPdg        );
    brStdHepStatus    -> SetAddress (  StdHepStatus     );
    if(using_new_version) {
    brStdHepRescat    -> SetAddress (  StdHepRescat     );
    }
    brStdHepX4        -> SetAddress (  StdHepX4         );
    brStdHepP4        -> SetAddress (  StdHepP4         );
    brStdHepPolz      -> SetAddress (  StdHepPolz       );
    brStdHepFd        -> SetAddress (  StdHepFd         );
    brStdHepLd        -> SetAddress (  StdHepLd         );
    brStdHepFm        -> SetAddress (  StdHepFm         );
    brStdHepLm        -> SetAddress (  StdHepLm         );
    if(using_new_version) {
    brG2NeutEvtCode   -> SetAddress ( &G2NeutEvtCode   );
    }
    brNuParentPdg     -> SetAddress ( &NuParentPdg     );
    brNuParentDecMode -> SetAddress ( &NuParentDecMode );
    brNuParentDecP4   -> SetAddress (  NuParentDecP4   );
    brNuParentDecX4   -> SetAddress (  NuParentDecX4   );
    brNuParentProP4   -> SetAddress (  NuParentProP4   );     
    brNuParentProX4   -> SetAddress (  NuParentProX4   );     
    brNuParentProNVtx -> SetAddress ( &NuParentProNVtx );   

    int n = tree->GetEntries(); 
	printf ("\n------------------------  SUMMARY  TABLE ------------------------");
    printf ("\nFILE: %s\n", Fname.c_str());
    printf("\nNumber of entries: %d", n);

    MyPDG my_pdg;

    std::map <int, int> stuck_particle_count, new_particle_count, crossed_particle_count, stopped_particle_count, decayed_particle_count, orig_particle_count;
    std::map <int, int> stuck_primary_muon_count, new_primary_muon_count, crossed_primary_muon_count, stopped_primary_muon_count, decayed_primary_muon_count, orig_primary_muon_count;
    std::map <int, int> stuck_secondary_muon_count, new_secondary_muon_count, crossed_secondary_muon_count, stopped_secondary_muon_count, decayed_secondary_muon_count, orig_secondary_muon_count;
    std::map <int, double> crossed_particle_percentage, stuck_particle_percentage;
    std::map <int, double> crossed_secondary_muon_percentage, stuck_secondary_muon_percentage, crossed_primary_muon_percentage, stuck_primary_muon_percentage, orig_primary_muon_percentage, orig_secondary_muon_percentage;
	std::map <int, int> orig_particle_id, orig_particle_kid, orig_particle_mom, orig_particle_ist;    
	std::map <int, int> new_particle_id, new_particle_kid, new_particle_mom, new_particle_ist;    
	std::map <int, int> crossed_particle_id, crossed_particle_kid, crossed_particle_mom, crossed_particle_ist;   
	std::map <int, int> pdg;


    int electron_count=0, positron_count=0, mu_count = 0, amu_count = 0;
    double MinEnergy = 0, MaxEnergy = 10000;
	int nbinEnergyW = 50;
	int nbinEnergy = (MaxEnergy - MinEnergy)/nbinEnergyW;
    double MinMomentum = 0, MaxMomentum = 30000;
	int nbinMomentumW = 1;
	int nbinMomentum = (MaxMomentum - MinMomentum)/nbinMomentumW;
    double MinMass = 0, MaxMass = 1000;
	int nbinMassW = 1;
	int nbinMass = (MaxMass - MinMass)/nbinMassW;

	
	//GEOMETRY DETAILS STARTS =========================================================================================================
	double x0 = 0, y0 = -238.463, z0 = 2390.89, R0; //the z,y co-ordinates of the barrel axis, or the center of the z-y crossection (not sure about x0), R0 is the radius of main events
    //----------------------------------------------------------
    double ext_air1_rmax = 330 + 0.5;
    double ext_air1_rmin = 330;
    double yoke_rmax = ext_air1_rmin;   
    double yoke_rmin = 293; 
    double int_air2_rmax = yoke_rmin;   
    double int_air2_rmin = int_air2_rmax - 0.05;    
    double int_scint_rmax = int_air2_rmin;  
    double int_scint_rmin = int_scint_rmax - 4.9;   
    double int_air1_rmax = int_scint_rmin;  
    double int_air1_rmin = int_air1_rmax - 0.05;
    double cryo_outer_rmax = int_air1_rmin;         //288   
    double cryo_outer_rmin = int_air1_rmin - 1.5;   
    //there's a gap here... large gap of 25.4 cm between the coil end and the outer wall start
    double gap3_rmax = cryo_outer_rmin;
    double gap3_rmin = 261.1;
    double coil_rmax = gap3_rmin; 
    double coil_rmin = coil_rmax - 1.0; 
    double coil_shell_rmax = coil_rmin; 
    double coil_shell_rmin = coil_shell_rmax - 1.1; //259
    //there's another gap here... a gap of 14.5 cm between the inner wall end and the coil shell start
    double gap2_rmax = coil_shell_rmin;
    double gap2_rmin = 244.5;
    double cryo_inner_rmax = gap3_rmin; 
    double cryo_inner_rmin = cryo_inner_rmax - 1.5;
    //there's a gap between the ecal and the cryo wall
    double gap1_rmax = cryo_inner_rmin;
    double gap1_rmin = 224.22;
    double ecal_rmax = gap1_rmin;
    double ecal_rmin = 200.0;
    double gap0_rmax = ecal_rmin;
    double gap0_rmin = 200.0 - 20.0;
    double stt_rmax = gap0_rmin;  //excluding 20 cm edge of vol STT
    //GEOMETRY DETAILS ENDS ===========================================================================================================

	
	//THE EVENT RELATED
    double X, Y, Z; //event co-ordinates in geometry frame (original FV events)
    double sx1, sy1, sz1; //boundary events?
    double mx1, my1, mz1; //boundary events?
	double sdx, sdy, sdz;	// distance of an event from the barrel axis (self)	
	double mdx, mdy, mdz;	// distance of an event from the barrel axis (mother)	
    double stheta, mtheta;	// angle swept out by a perpenducular dropped from the event to the barrel axis with the the z axis 
	double srad_distance, mrad_distance; // length of the above mentioned vector, or the distance of the event from the barrel axis

	double minE_muon = MaxEnergy, maxE_muon = minE_muon;
    double minP2_muon = pow(MaxMomentum,2), maxP2_muon = pow(MinMomentum,2);
    double minE_pion = MaxEnergy, maxE_pion = minE_pion;
    double minP2_pion = pow(MaxMomentum,2), maxP2_pion = pow(MinMomentum,2);

    double energy, mom_energy;
    double mass, mom_mass;
    double momentum2, mom_momentum2;
    int piminus_pdg = -211, mu_pdg = 13, mu_nu_pdg = 14;  // as we will be using these two extensively
    
    std::vector <int> allPdg;
    TParticlePDG *pdgSelf = new TParticlePDG();
	TParticlePDG *pdgMom = new TParticlePDG();
	
    int self, mom;  //pdg of the particle and that of its mom

    //HISTOGRAM DEFINITIONS AND STYLES
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------
	//event coords distribution
	//TH2F events_yz("events_yz","Eevents in detector coords.", (2594-2187), 2187, 2594, (441-34.9), -441, -34.9);
	TH2F events_yz("events_yz","Eevents in detector coords.", (2850-1950), 1950, 2850, (750+250), -750, 250);
	events_yz.GetXaxis()->SetTitle("Z (cm)");
	events_yz.GetYaxis()->SetTitle("Y (cm)");
	events_yz.SetMarkerColor(kRed);
	
	//####################################################  MUONS START ################################################################################################################################
	// FOR MUONS

	double muon_mass = 105.6583755;
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ MU-  START ##############################################################################################################################
   //energy vs momentum TProfile
	TProfile crossed_muminus_mom_disp("crossed_muminus_mom_disp","E^2 vs p^2 distribution of the " + Tpost_vol + "-entering #mu^{-}'s mom #mu^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile crossed_muminus_disp("crossed_muminus_disp","E^2 vs p^2 distribution of the  " + Tpost_vol + "-entering #mu^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile stuck_muminus_disp("stuck_muminus_disp","E^2 vs p^2 distribution of the  " + Tpost_vol + "-stuck #mu^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile new_muminus_disp("new_muminus_disp","E^2 vs p^2 distribution of the post- " + Tpost_vol + "-new #mu^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	crossed_muminus_mom_disp.Sumw2();
	crossed_muminus_disp.Sumw2();
	stuck_muminus_disp.Sumw2();
	new_muminus_disp.Sumw2();
	crossed_muminus_mom_disp.GetYaxis()->SetTitle("E^{2} (MeV^{2})");	
	crossed_muminus_mom_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");	
	crossed_muminus_mom_disp.GetYaxis()->SetLabelSize(0.05);	
	crossed_muminus_mom_disp.GetYaxis()->SetTitleSize(0.05);	
	crossed_muminus_mom_disp.GetXaxis()->SetLabelSize(0.05);	
	crossed_muminus_mom_disp.GetXaxis()->SetTitleSize(0.05);	
	crossed_muminus_mom_disp.GetYaxis()->SetTitleOffset(1.0);	
	crossed_muminus_mom_disp.GetXaxis()->SetTitleOffset(1.0);	
	crossed_muminus_mom_disp.SetMarkerStyle(4);
	crossed_muminus_mom_disp.SetMarkerSize(0.2);
	crossed_muminus_mom_disp.SetMarkerColor(kSpring);
	crossed_muminus_mom_disp.SetLineColor(kSpring);

	crossed_muminus_disp.GetYaxis()->SetTitle("E^{2} (MeV^{2})");	
	crossed_muminus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	crossed_muminus_disp.GetYaxis()->SetTitleSize(0.05);	
	crossed_muminus_disp.GetXaxis()->SetTitleSize(0.05);	
	crossed_muminus_disp.GetYaxis()->SetTitleOffset(1.0);	
	crossed_muminus_disp.GetXaxis()->SetTitleOffset(1.0);	
	crossed_muminus_disp.SetMarkerStyle(4);
	crossed_muminus_disp.SetMarkerSize(0.2);
	crossed_muminus_disp.SetMarkerColor(kGreen);
	crossed_muminus_disp.SetLineColor(kGreen);
	
	stuck_muminus_disp.GetYaxis()->SetTitle("E^{2} (MeV^{2})");	
	stuck_muminus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	stuck_muminus_disp.GetYaxis()->SetTitleSize(0.05);	
	stuck_muminus_disp.GetXaxis()->SetTitleSize(0.05);	
	stuck_muminus_disp.GetYaxis()->SetTitleOffset(1.0);	
	stuck_muminus_disp.GetXaxis()->SetTitleOffset(1.0);	
	stuck_muminus_disp.SetMarkerStyle(4);
	stuck_muminus_disp.SetMarkerSize(0.2);
	stuck_muminus_disp.SetMarkerColor(kGray+2);
	stuck_muminus_disp.SetLineColor(kGray+2);
	
	new_muminus_disp.GetYaxis()->SetTitle("E^{2} (MeV^{2})");	
	new_muminus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	new_muminus_disp.GetYaxis()->SetTitleOffset(1.0);	
	new_muminus_disp.GetXaxis()->SetTitleOffset(1.0);	
	new_muminus_disp.GetYaxis()->SetTitleSize(0.05);	
	new_muminus_disp.GetXaxis()->SetTitleSize(0.05);	
	new_muminus_disp.SetMarkerSize(0.2);
	new_muminus_disp.SetMarkerStyle(4);
	new_muminus_disp.SetMarkerColor(kGray);
	new_muminus_disp.SetLineColor(kGray);

	//mass distribution
	TH1F crossed_muminus_mom_mass("crossed_muminus_mom_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-entering #mu^{-}'s mom #mu^{-}", nbinMass, MinMass, MaxMass);
	TH1F crossed_muminus_mass("crossed_muminus_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-entering #mu^{-}", nbinMass, MinMass, MaxMass);
	TH1F new_muminus_mass("new_muminus_mass","sqrt(E^{2} - p^{2}) distribution of the post- " + Tpost_vol + "-new #mu^{-}", nbinMass, MinMass, MaxMass);
	TH1F stuck_muminus_mass("stuck_muminus_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-stuck #mu^{-}", nbinMass, MinMass, MaxMass);
    
	crossed_muminus_mom_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
    crossed_muminus_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
	new_muminus_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
	crossed_muminus_mom_mass.GetYaxis()->SetTitleOffset(1.0);	
	crossed_muminus_mom_mass.GetXaxis()->SetTitleOffset(1.0);	
	crossed_muminus_mom_mass.GetYaxis()->SetTitleSize(0.05);	
	crossed_muminus_mom_mass.GetXaxis()->SetTitleSize(0.05);	
	crossed_muminus_mass.GetYaxis()->SetTitleOffset(1.0);	
	crossed_muminus_mass.GetXaxis()->SetTitleOffset(1.0);	
	crossed_muminus_mass.GetYaxis()->SetTitleSize(0.05);	
	crossed_muminus_mass.GetXaxis()->SetTitleSize(0.05);	
	stuck_muminus_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
	stuck_muminus_mass.GetYaxis()->SetTitleOffset(1.0);	
	stuck_muminus_mass.GetXaxis()->SetTitleOffset(1.0);	
	stuck_muminus_mass.GetYaxis()->SetTitleSize(0.05);	
	stuck_muminus_mass.GetXaxis()->SetTitleSize(0.05);	
	new_muminus_mass.GetYaxis()->SetTitleOffset(1.0);	
	new_muminus_mass.GetXaxis()->SetTitleOffset(1.0);	
	new_muminus_mass.GetYaxis()->SetTitleSize(0.05);	
	new_muminus_mass.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_muminus_mom_mass.SetFillColorAlpha(kSpring+1,0.3);
    crossed_muminus_mass.SetFillColorAlpha(kGreen,0.3);
    new_muminus_mass.SetFillColorAlpha(kRed,0.3);
    stuck_muminus_mass.SetFillColorAlpha(kGray+2,0.3);

    crossed_muminus_mom_mass.SetLineColor(kSpring+2);
    crossed_muminus_mass.SetLineColor(kGreen+2);
    new_muminus_mass.SetLineColor(kRed+1);
    stuck_muminus_mass.SetLineColor(kBlack);
   
    //energy distribution
    //muon 
    //primary
	TH1F crossed_primary_muminus_mom_energy("crossed_primary_muminus_mom_energy","Energy distribution of the  " + Tpost_vol + "-entering #mu^{-}'s mom #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F crossed_primary_muminus_energy("crossed_primary_muminus_energy","Energy distribution of the  " + Tpost_vol + "-entering #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F stuck_primary_muminus_energy("stuck_primary_muminus_energy","Energy distribution of the stuck #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F new_primary_muminus_energy("new_primary_muminus_energy","Energy distribution of the post- " + Tpost_vol + " new #mu^{-}", nbinEnergy, 0, MaxEnergy);
	
    crossed_primary_muminus_mom_energy.GetXaxis()->SetTitle("E (MeV)");
    crossed_primary_muminus_energy.GetXaxis()->SetTitle("E (MeV)");
	new_primary_muminus_energy.GetXaxis()->SetTitle("E (MeV)");
	stuck_primary_muminus_energy.GetXaxis()->SetTitle("E (MeV)");
	
    crossed_primary_muminus_mom_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_primary_muminus_mom_energy.GetXaxis()->SetTitleOffset(1.0);	
	crossed_primary_muminus_mom_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_primary_muminus_mom_energy.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_primary_muminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_primary_muminus_energy.GetXaxis()->SetTitleOffset(1.0);	
	stuck_primary_muminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	stuck_primary_muminus_energy.GetXaxis()->SetTitleOffset(1.0);	
    new_primary_muminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	new_primary_muminus_energy.GetXaxis()->SetTitleOffset(1.0);	
	
    crossed_primary_muminus_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_primary_muminus_energy.GetXaxis()->SetTitleSize(0.05);	
	
	stuck_primary_muminus_energy.GetYaxis()->SetTitleSize(0.05);	
	stuck_primary_muminus_energy.GetXaxis()->SetTitleSize(0.05);	
	
	new_primary_muminus_energy.GetYaxis()->SetTitleSize(0.05);	
	new_primary_muminus_energy.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_primary_muminus_mom_energy.GetYaxis()->SetLabelSize(0.05);	
	crossed_primary_muminus_mom_energy.GetXaxis()->SetLabelSize(0.05);	
	
    crossed_primary_muminus_energy.GetYaxis()->SetLabelSize(0.05);	
	crossed_primary_muminus_energy.GetXaxis()->SetLabelSize(0.05);	
	
	stuck_primary_muminus_energy.GetYaxis()->SetLabelSize(0.05);	
	stuck_primary_muminus_energy.GetXaxis()->SetLabelSize(0.05);	
	
	new_primary_muminus_energy.GetYaxis()->SetLabelSize(0.05);	
	new_primary_muminus_energy.GetXaxis()->SetLabelSize(0.05);	
	
    crossed_primary_muminus_mom_energy.SetFillColorAlpha(kSpring+8,0.3);
    crossed_primary_muminus_energy.SetFillColorAlpha(kGreen+2,0.3);
    new_primary_muminus_energy.SetFillColorAlpha(kRed,0.3);
    stuck_primary_muminus_energy.SetFillColorAlpha(kGray+2,0.3);
    
	crossed_primary_muminus_mom_energy.SetLineColor(kGreen+3);
    crossed_primary_muminus_energy.SetLineColor(kGreen+5);
    new_primary_muminus_energy.SetLineColor(kRed+1);
    stuck_primary_muminus_energy.SetLineColor(kBlack);
    
    //secondary
	TH1F crossed_secondary_muminus_mom_energy("crossed_secondary_muminus_mom_energy","Energy distribution of the  " + Tpost_vol + "-entering #mu^{-}'s mom #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F crossed_secondary_muminus_energy("crossed_secondary_muminus_energy","Energy distribution of the  " + Tpost_vol + "-entering #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F stuck_secondary_muminus_energy("stuck_secondary_muminus_energy","Energy distribution of the stuck #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F new_secondary_muminus_energy("new_secondary_muminus_energy","Energy distribution of the post- " + Tpost_vol + " new #mu^{-}", nbinEnergy, 0, MaxEnergy);
	
    crossed_secondary_muminus_mom_energy.GetXaxis()->SetTitle("E (MeV)");
    crossed_secondary_muminus_energy.GetXaxis()->SetTitle("E (MeV)");
	new_secondary_muminus_energy.GetXaxis()->SetTitle("E (MeV)");
	stuck_secondary_muminus_energy.GetXaxis()->SetTitle("E (MeV)");
	crossed_secondary_muminus_mom_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_secondary_muminus_mom_energy.GetXaxis()->SetTitleOffset(1.0);	
	crossed_secondary_muminus_mom_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_secondary_muminus_mom_energy.GetXaxis()->SetTitleSize(0.05);	
	crossed_secondary_muminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_secondary_muminus_energy.GetXaxis()->SetTitleOffset(1.0);	
	
    crossed_secondary_muminus_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_secondary_muminus_energy.GetXaxis()->SetTitleSize(0.05);	
	
    stuck_secondary_muminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	stuck_secondary_muminus_energy.GetXaxis()->SetTitleOffset(1.0);	
	
    crossed_secondary_muminus_mom_energy.GetYaxis()->SetLabelSize(0.05);	
	crossed_secondary_muminus_mom_energy.GetXaxis()->SetLabelSize(0.05);	
    crossed_secondary_muminus_energy.GetYaxis()->SetLabelSize(0.05);	
	crossed_secondary_muminus_energy.GetXaxis()->SetLabelSize(0.05);	
	
    stuck_secondary_muminus_energy.GetYaxis()->SetTitleSize(0.05);	
	stuck_secondary_muminus_energy.GetXaxis()->SetTitleSize(0.05);	
	stuck_secondary_muminus_energy.GetYaxis()->SetLabelSize(0.05);	
	stuck_secondary_muminus_energy.GetXaxis()->SetLabelSize(0.05);	
	

	
    new_secondary_muminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	new_secondary_muminus_energy.GetXaxis()->SetTitleOffset(1.0);	
	
	new_secondary_muminus_energy.GetYaxis()->SetLabelSize(0.05);	
	new_secondary_muminus_energy.GetXaxis()->SetLabelSize(0.05);	
    new_secondary_muminus_energy.GetYaxis()->SetTitleSize(0.05);	
	new_secondary_muminus_energy.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_secondary_muminus_mom_energy.SetFillColorAlpha(kCyan-4,0.3);
    crossed_secondary_muminus_energy.SetFillColorAlpha(kTeal-6,0.3);
    new_secondary_muminus_energy.SetFillColorAlpha(kMagenta,0.3);
    stuck_secondary_muminus_energy.SetFillColorAlpha(kBlue-8,0.3);
    
	crossed_secondary_muminus_mom_energy.SetLineColor(kTeal+3);
    crossed_secondary_muminus_energy.SetLineColor(kTeal+3);
    new_secondary_muminus_energy.SetLineColor(kMagenta+4);
    stuck_secondary_muminus_energy.SetLineColor(kBlue+3);
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ MU-  END ################################################################################################################################
	
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ MU+  START ##############################################################################################################################
   //energy vs momentum TProfile
	TProfile crossed_muplus_mom_disp("crossed_muplus_mom_disp","E^2 vs p^2 distribution of the " + Tpost_vol + "-entering #mu^{-}'s mom #mu^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile crossed_muplus_disp("crossed_muplus_disp","E^2 vs p^2 distribution of the  " + Tpost_vol + "-entering #mu^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile stuck_muplus_disp("stuck_muplus_disp","E^2 vs p^2 distribution of the  " + Tpost_vol + "-stuck #mu^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile new_muplus_disp("new_muplus_disp","E^2 vs p^2 distribution of the post- " + Tpost_vol + "-new #mu^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	crossed_muplus_mom_disp.Sumw2();
	crossed_muplus_disp.Sumw2();
	stuck_muplus_disp.Sumw2();
	new_muplus_disp.Sumw2();
	crossed_muplus_mom_disp.GetYaxis()->SetTitle("E^{2} (MeV^{2})");	
	crossed_muplus_mom_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");	
	crossed_muplus_mom_disp.GetYaxis()->SetTitleSize(0.05);	
	crossed_muplus_mom_disp.GetXaxis()->SetTitleSize(0.05);	
	crossed_muplus_mom_disp.GetYaxis()->SetTitleOffset(1.0);	
	crossed_muplus_mom_disp.GetXaxis()->SetTitleOffset(1.0);	
	crossed_muplus_mom_disp.SetMarkerStyle(4);
	crossed_muplus_mom_disp.SetMarkerSize(0.2);
	crossed_muplus_mom_disp.SetMarkerColor(kSpring);
	crossed_muplus_mom_disp.SetLineColor(kSpring);

	crossed_muplus_disp.GetYaxis()->SetTitle("E^{2} (MeV^{2})");	
	crossed_muplus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	crossed_muplus_disp.GetYaxis()->SetTitleSize(0.05);	
	crossed_muplus_disp.GetXaxis()->SetTitleSize(0.05);	
	crossed_muplus_disp.GetYaxis()->SetTitleOffset(1.0);	
	crossed_muplus_disp.GetXaxis()->SetTitleOffset(1.0);	
	crossed_muplus_disp.SetMarkerStyle(4);
	crossed_muplus_disp.SetMarkerSize(0.2);
	crossed_muplus_disp.SetMarkerColor(kGreen);
	crossed_muplus_disp.SetLineColor(kGreen);
	
	stuck_muplus_disp.GetYaxis()->SetTitle("E^{2} (MeV^{2})");	
	stuck_muplus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	stuck_muplus_disp.GetYaxis()->SetTitleSize(0.05);	
	stuck_muplus_disp.GetXaxis()->SetTitleSize(0.05);	
	stuck_muplus_disp.GetYaxis()->SetTitleOffset(1.0);	
	stuck_muplus_disp.GetXaxis()->SetTitleOffset(1.0);	
	stuck_muplus_disp.SetMarkerStyle(4);
	stuck_muplus_disp.SetMarkerSize(0.2);
	stuck_muplus_disp.SetMarkerColor(kGray+2);
	stuck_muplus_disp.SetLineColor(kGray+2);
	
	new_muplus_disp.GetYaxis()->SetTitle("E^{2} (MeV^{2})");	
	new_muplus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	new_muplus_disp.GetYaxis()->SetTitleOffset(1.0);	
	new_muplus_disp.GetXaxis()->SetTitleOffset(1.0);	
	new_muplus_disp.GetYaxis()->SetTitleSize(0.05);	
	new_muplus_disp.GetXaxis()->SetTitleSize(0.05);	
	new_muplus_disp.SetMarkerSize(0.2);
	new_muplus_disp.SetMarkerStyle(4);
	new_muplus_disp.SetMarkerColor(kGray);
	new_muplus_disp.SetLineColor(kGray);

	//mass distribution
	TH1F crossed_muplus_mom_mass("crossed_muplus_mom_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-entering #mu^{-}'s mom #mu^{-}", nbinMass, MinMass, MaxMass);
	TH1F crossed_muplus_mass("crossed_muplus_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-entering #mu^{-}", nbinMass, MinMass, MaxMass);
	TH1F new_muplus_mass("new_muplus_mass","sqrt(E^{2} - p^{2}) distribution of the post- " + Tpost_vol + "-new #mu^{-}", nbinMass, MinMass, MaxMass);
	TH1F stuck_muplus_mass("stuck_muplus_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-stuck #mu^{-}", nbinMass, MinMass, MaxMass);
    
	crossed_muplus_mom_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
    crossed_muplus_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
	new_muplus_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
	crossed_muplus_mom_mass.GetYaxis()->SetTitleOffset(1.0);	
	crossed_muplus_mom_mass.GetXaxis()->SetTitleOffset(1.0);	
	crossed_muplus_mom_mass.GetYaxis()->SetTitleSize(0.05);	
	crossed_muplus_mom_mass.GetXaxis()->SetTitleSize(0.05);	
	crossed_muplus_mass.GetYaxis()->SetTitleOffset(1.0);	
	crossed_muplus_mass.GetXaxis()->SetTitleOffset(1.0);	
	crossed_muplus_mass.GetYaxis()->SetTitleSize(0.05);	
	crossed_muplus_mass.GetXaxis()->SetTitleSize(0.05);	
	stuck_muplus_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
	stuck_muplus_mass.GetYaxis()->SetTitleOffset(1.0);	
	stuck_muplus_mass.GetXaxis()->SetTitleOffset(1.0);	
	stuck_muplus_mass.GetYaxis()->SetTitleSize(0.05);	
	stuck_muplus_mass.GetXaxis()->SetTitleSize(0.05);	
	new_muplus_mass.GetYaxis()->SetTitleOffset(1.0);	
	new_muplus_mass.GetXaxis()->SetTitleOffset(1.0);	
	new_muplus_mass.GetYaxis()->SetTitleSize(0.05);	
	new_muplus_mass.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_muplus_mom_mass.SetFillColorAlpha(kSpring+1,0.3);
    crossed_muplus_mass.SetFillColorAlpha(kGreen,0.3);
    new_muplus_mass.SetFillColorAlpha(kRed,0.3);
    stuck_muplus_mass.SetFillColorAlpha(kGray+2,0.3);

    crossed_muplus_mom_mass.SetLineColor(kSpring+2);
    crossed_muplus_mass.SetLineColor(kGreen+2);
    new_muplus_mass.SetLineColor(kRed+1);
    stuck_muplus_mass.SetLineColor(kBlack);
   
    //energy distribution
    //muon 
    //primary
	TH1F crossed_primary_muplus_mom_energy("crossed_primary_muplus_mom_energy","Energy distribution of the  " + Tpost_vol + "-entering #mu^{-}'s mom #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F crossed_primary_muplus_energy("crossed_primary_muplus_energy","Energy distribution of the  " + Tpost_vol + "-entering #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F stuck_primary_muplus_energy("stuck_primary_muplus_energy","Energy distribution of the stuck #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F new_primary_muplus_energy("new_primary_muplus_energy","Energy distribution of the post- " + Tpost_vol + " new #mu^{-}", nbinEnergy, 0, MaxEnergy);
	
    crossed_primary_muplus_mom_energy.GetXaxis()->SetTitle("E (MeV)");
    crossed_primary_muplus_energy.GetXaxis()->SetTitle("E (MeV)");
	new_primary_muplus_energy.GetXaxis()->SetTitle("E (MeV)");
	stuck_primary_muplus_energy.GetXaxis()->SetTitle("E (MeV)");
	
    crossed_primary_muplus_mom_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_primary_muplus_mom_energy.GetXaxis()->SetTitleOffset(1.0);	
    
    crossed_primary_muplus_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_primary_muplus_energy.GetXaxis()->SetTitleOffset(1.0);	
    
    stuck_primary_muplus_energy.GetYaxis()->SetTitleOffset(1.0);	
	stuck_primary_muplus_energy.GetXaxis()->SetTitleOffset(1.0);	
    
    new_primary_muplus_energy.GetYaxis()->SetTitleOffset(1.0);	
	new_primary_muplus_energy.GetXaxis()->SetTitleOffset(1.0);	
	
    crossed_primary_muplus_mom_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_primary_muplus_mom_energy.GetXaxis()->SetTitleSize(0.05);	
	
	crossed_primary_muplus_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_primary_muplus_energy.GetXaxis()->SetTitleSize(0.05);	
	
	stuck_primary_muplus_energy.GetYaxis()->SetTitleSize(0.05);	
	stuck_primary_muplus_energy.GetXaxis()->SetTitleSize(0.05);	
	
	new_primary_muplus_energy.GetYaxis()->SetTitleSize(0.05);	
	new_primary_muplus_energy.GetXaxis()->SetTitleSize(0.05);	
	
	crossed_primary_muplus_energy.GetYaxis()->SetLabelSize(0.05);	
	crossed_primary_muplus_energy.GetXaxis()->SetLabelSize(0.05);	
	
	stuck_primary_muplus_energy.GetYaxis()->SetLabelSize(0.05);	
	stuck_primary_muplus_energy.GetXaxis()->SetLabelSize(0.05);	
	
	new_primary_muplus_energy.GetYaxis()->SetLabelSize(0.05);	
	new_primary_muplus_energy.GetXaxis()->SetLabelSize(0.05);	
   
    
    crossed_primary_muplus_mom_energy.SetFillColorAlpha(kSpring+8,0.3);
    crossed_primary_muplus_energy.SetFillColorAlpha(kGreen+2,0.3);
    new_primary_muplus_energy.SetFillColorAlpha(kRed,0.3);
    stuck_primary_muplus_energy.SetFillColorAlpha(kGray+2,0.3);
    
	crossed_primary_muplus_mom_energy.SetLineColor(kGreen+3);
    crossed_primary_muplus_energy.SetLineColor(kGreen+5);
    new_primary_muplus_energy.SetLineColor(kRed+1);
    stuck_primary_muplus_energy.SetLineColor(kBlack);
    
    //secondary
	TH1F crossed_secondary_muplus_mom_energy("crossed_secondary_muplus_mom_energy","Energy distribution of the  " + Tpost_vol + "-entering #mu^{-}'s mom #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F crossed_secondary_muplus_energy("crossed_secondary_muplus_energy","Energy distribution of the  " + Tpost_vol + "-entering #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F stuck_secondary_muplus_energy("stuck_secondary_muplus_energy","Energy distribution of the stuck #mu^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F new_secondary_muplus_energy("new_secondary_muplus_energy","Energy distribution of the post- " + Tpost_vol + " new #mu^{-}", nbinEnergy, 0, MaxEnergy);
	
    crossed_secondary_muplus_mom_energy.GetXaxis()->SetTitle("E (MeV)");
    crossed_secondary_muplus_energy.GetXaxis()->SetTitle("E (MeV)");
	new_secondary_muplus_energy.GetXaxis()->SetTitle("E (MeV)");
	stuck_secondary_muplus_energy.GetXaxis()->SetTitle("E (MeV)");
	crossed_secondary_muplus_mom_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_secondary_muplus_mom_energy.GetXaxis()->SetTitleOffset(1.0);	
	crossed_secondary_muplus_mom_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_secondary_muplus_mom_energy.GetXaxis()->SetTitleSize(0.05);	
	crossed_secondary_muplus_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_secondary_muplus_energy.GetXaxis()->SetTitleOffset(1.0);	
	crossed_secondary_muplus_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_secondary_muplus_energy.GetXaxis()->SetTitleSize(0.05);	
	stuck_secondary_muplus_energy.GetXaxis()->SetTitle("M (MeV/c^{2})");
	stuck_secondary_muplus_energy.GetYaxis()->SetTitleOffset(1.0);	
	stuck_secondary_muplus_energy.GetXaxis()->SetTitleOffset(1.0);	
	stuck_secondary_muplus_energy.GetYaxis()->SetTitleSize(0.05);	
	stuck_secondary_muplus_energy.GetXaxis()->SetTitleSize(0.05);	
	new_secondary_muplus_energy.GetYaxis()->SetTitleOffset(1.0);	
	new_secondary_muplus_energy.GetXaxis()->SetTitleOffset(1.0);	
	new_secondary_muplus_energy.GetYaxis()->SetTitleSize(0.05);	
	new_secondary_muplus_energy.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_secondary_muplus_mom_energy.SetFillColorAlpha(kCyan-4,0.3);
    crossed_secondary_muplus_energy.SetFillColorAlpha(kTeal-6,0.3);
    new_secondary_muplus_energy.SetFillColorAlpha(kMagenta,0.3);
    stuck_secondary_muplus_energy.SetFillColorAlpha(kBlue-8,0.3);
    
	crossed_secondary_muplus_mom_energy.SetLineColor(kTeal+3);
    crossed_secondary_muplus_energy.SetLineColor(kTeal+3);
    new_secondary_muplus_energy.SetLineColor(kMagenta+4);
    stuck_secondary_muplus_energy.SetLineColor(kBlue+3);
	//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ MU+  END ################################################################################################################################
	//######################################################## MUONS END ###############################################################################################################################
	
	
	
	
	//####################################################  PIONS START ################################################################################################################################
	// FOR PIONS
	double pion_mass = 139.57018;
   //energy vs momentum TProfile
	TProfile crossed_piminus_mom_disp("crossed_piminus_mom_disp","E^2 vs p^2 distribution of the  " + Tpost_vol + "-entering #pi^{-}^{-}'s mom #pi^{-}^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile crossed_piminus_disp("crossed_piminus_disp","E^2 vs p^2 distribution of the  " + Tpost_vol + "-entering #pi^{-}^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile stuck_piminus_disp("stuck_piminus_disp","E^2 vs p^2 distribution of the  " + Tpost_vol + "-stuck #pi^{-}^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	TProfile new_piminus_disp("new_piminus_disp","E^2 vs p^2 distribution of the post- " + Tpost_vol + "-new #pi^{-}^{-}", nbinMomentum, MinMomentum, pow(MaxMomentum,2));
	crossed_piminus_mom_disp.Sumw2();
	crossed_piminus_disp.Sumw2();
	stuck_piminus_disp.Sumw2();
	new_piminus_disp.Sumw2();
	crossed_piminus_mom_disp.GetYaxis()->SetTitle("E^2 (MeV^{2})");	
	crossed_piminus_mom_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");	
	crossed_piminus_mom_disp.GetYaxis()->SetTitleOffset(1.0);	
	crossed_piminus_mom_disp.GetXaxis()->SetTitleOffset(1.0);	
	crossed_piminus_mom_disp.GetYaxis()->SetTitleSize(0.05);	
	crossed_piminus_mom_disp.GetXaxis()->SetTitleSize(0.05);	
	crossed_piminus_disp.GetYaxis()->SetTitleOffset(1.0);	
	crossed_piminus_disp.GetXaxis()->SetTitleOffset(1.0);	
	crossed_piminus_disp.GetYaxis()->SetTitleSize(0.05);	
	crossed_piminus_disp.GetXaxis()->SetTitleSize(0.05);	
	stuck_piminus_disp.GetXaxis()->SetTitle("M (MeV/c^{2})");
	stuck_piminus_disp.GetYaxis()->SetTitleOffset(1.0);	
	stuck_piminus_disp.GetXaxis()->SetTitleOffset(1.0);	
	stuck_piminus_disp.GetYaxis()->SetTitleSize(0.05);	
	stuck_piminus_disp.GetXaxis()->SetTitleSize(0.05);	
	new_piminus_disp.GetYaxis()->SetTitleOffset(1.0);	
	new_piminus_disp.GetXaxis()->SetTitleOffset(1.0);	
	new_piminus_disp.GetYaxis()->SetTitleSize(0.05);	
	new_piminus_disp.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_piminus_mom_disp.SetMarkerStyle(4);
	crossed_piminus_mom_disp.SetMarkerSize(0.2);
	crossed_piminus_mom_disp.SetMarkerColor(kSpring);
	crossed_piminus_mom_disp.SetLineColor(kSpring);

	crossed_piminus_disp.GetYaxis()->SetTitle("E^2 (MeV^{2})");	
	crossed_piminus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	crossed_piminus_disp.SetMarkerStyle(4);
	crossed_piminus_disp.SetMarkerSize(0.2);
	crossed_piminus_disp.SetMarkerColor(kGreen);
	crossed_piminus_disp.SetLineColor(kGreen);
	
	stuck_piminus_disp.GetYaxis()->SetTitle("E^2 (MeV^{2})");	
	stuck_piminus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	stuck_piminus_disp.SetMarkerStyle(4);
	stuck_piminus_disp.SetMarkerSize(0.2);
	stuck_piminus_disp.SetMarkerColor(kGray+2);
	stuck_piminus_disp.SetLineColor(kGray+2);
	
	new_piminus_disp.GetYaxis()->SetTitle("E^2 (MeV^{2})");	
	new_piminus_disp.GetXaxis()->SetTitle("p^{2} (MeV^{2}/c^{2})");
	new_piminus_disp.SetMarkerSize(0.2);
	new_piminus_disp.SetMarkerStyle(4);
	new_piminus_disp.SetMarkerColor(kGray);
	new_piminus_disp.SetLineColor(kGray);

	//mass distribution
	TH1F crossed_piminus_mom_mass("crossed_piminus_mom_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-entering #piminus^{-}'s mom #piminus^{-}", nbinMass, MinMass, MaxMass);
	TH1F crossed_piminus_mass("crossed_piminus_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-entering #piminus^{-}", nbinMass, MinMass, MaxMass);
	TH1F new_piminus_mass("new_piminus_mass","sqrt(E^{2} - p^{2}) distribution of the post- " + Tpost_vol + "-new #piminus^{-}", nbinMass, MinMass, MaxMass);
	TH1F stuck_piminus_mass("stuck_piminus_mass","sqrt(E^{2} - p^{2}) distribution of the  " + Tpost_vol + "-stuck #piminus^{-}", nbinMass, MinMass, MaxMass);
    
	crossed_piminus_mom_mass.GetXaxis()->SetTitle("MeV/c^{2}");
    crossed_piminus_mass.GetXaxis()->SetTitle("MeV/c^{2}");
	new_piminus_mass.GetXaxis()->SetTitle("MeV/c^{2}");
	stuck_piminus_mass.GetXaxis()->SetTitle("MeV/c^{2}");
	crossed_piminus_mom_mass.GetYaxis()->SetTitleOffset(1.0);	
	crossed_piminus_mom_mass.GetXaxis()->SetTitleOffset(1.0);	
	crossed_piminus_mom_mass.GetYaxis()->SetTitleSize(0.05);	
	crossed_piminus_mom_mass.GetXaxis()->SetTitleSize(0.05);	
	crossed_piminus_mass.GetYaxis()->SetTitleOffset(1.0);	
	crossed_piminus_mass.GetXaxis()->SetTitleOffset(1.0);	
	crossed_piminus_mass.GetYaxis()->SetTitleSize(0.05);	
	crossed_piminus_mass.GetXaxis()->SetTitleSize(0.05);	
	stuck_piminus_mass.GetXaxis()->SetTitle("M (MeV/c^{2})");
	stuck_piminus_mass.GetYaxis()->SetTitleOffset(1.0);	
	stuck_piminus_mass.GetXaxis()->SetTitleOffset(1.0);	
	stuck_piminus_mass.GetYaxis()->SetTitleSize(0.05);	
	stuck_piminus_mass.GetXaxis()->SetTitleSize(0.05);	
	new_piminus_mass.GetYaxis()->SetTitleOffset(1.0);	
	new_piminus_mass.GetXaxis()->SetTitleOffset(1.0);	
	new_piminus_mass.GetYaxis()->SetTitleSize(0.05);	
	new_piminus_mass.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_piminus_mom_mass.SetFillColorAlpha(kSpring+1,0.3);
    crossed_piminus_mass.SetFillColorAlpha(kGreen,0.3);
    new_piminus_mass.SetFillColorAlpha(kRed,0.3);
    stuck_piminus_mass.SetFillColorAlpha(kGray+2,0.3);

    crossed_piminus_mom_mass.SetLineColor(kSpring+2);
    crossed_piminus_mass.SetLineColor(kGreen+2);
    new_piminus_mass.SetLineColor(kRed+1);
    stuck_piminus_mass.SetLineColor(kBlack);
   
    //energy distribution
	TH1F crossed_piminus_mom_energy("crossed_piminus_mom_energy","Energy distribution of the  " + Tpost_vol + "-entering #piminus^{-}'s mom #piminus^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F crossed_piminus_energy("crossed_piminus_energy","Energy distribution of the  " + Tpost_vol + "-entering #piminus^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F stuck_piminus_energy("stuck_piminus_energy","Energy distribution of the stuck #piminus^{-}", nbinEnergy, 0, MaxEnergy);
	TH1F new_piminus_energy("new_piminus_energy","Energy distribution of the post- " + Tpost_vol + " new #piminus^{-}", nbinEnergy, 0, MaxEnergy);
	
    crossed_piminus_mom_energy.GetXaxis()->SetTitle("MeV");
    crossed_piminus_energy.GetXaxis()->SetTitle("MeV");
	new_piminus_energy.GetXaxis()->SetTitle("MeV");
	stuck_piminus_energy.GetXaxis()->SetTitle("MeV");
	crossed_piminus_mom_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_piminus_mom_energy.GetXaxis()->SetTitleOffset(1.0);	
	crossed_piminus_mom_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_piminus_mom_energy.GetXaxis()->SetTitleSize(0.05);	
	crossed_piminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	crossed_piminus_energy.GetXaxis()->SetTitleOffset(1.0);	
	crossed_piminus_energy.GetYaxis()->SetTitleSize(0.05);	
	crossed_piminus_energy.GetXaxis()->SetTitleSize(0.05);	
	stuck_piminus_energy.GetXaxis()->SetTitle("M (MeV/c^{2})");
	stuck_piminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	stuck_piminus_energy.GetXaxis()->SetTitleOffset(1.0);	
	stuck_piminus_energy.GetYaxis()->SetTitleSize(0.05);	
	stuck_piminus_energy.GetXaxis()->SetTitleSize(0.05);	
	new_piminus_energy.GetYaxis()->SetTitleOffset(1.0);	
	new_piminus_energy.GetXaxis()->SetTitleOffset(1.0);	
	new_piminus_energy.GetYaxis()->SetTitleSize(0.05);	
	new_piminus_energy.GetXaxis()->SetTitleSize(0.05);	
	
    crossed_piminus_mom_energy.SetFillColorAlpha(kSpring+8,0.3);
    crossed_piminus_energy.SetFillColorAlpha(kGreen+2,0.3);
    new_piminus_energy.SetFillColorAlpha(kRed,0.3);
    stuck_piminus_energy.SetFillColorAlpha(kGray+2,0.3);
    
	crossed_piminus_mom_energy.SetLineColor(kGreen+3);
    crossed_piminus_energy.SetLineColor(kGreen+5);
    new_piminus_energy.SetLineColor(kRed+1);
    stuck_piminus_energy.SetLineColor(kBlack);
	//####################################################  PIONS END ##################################################################################################################################

    //TGraphPolar * muon_rtheta = new TGraphPolar(257385);
    //TGraphPolar muon_rtheta(257385);
    //TH2D muon_rtheta("muon_rtheta" ,"" ,180 ,0, 360, 150, 0, 300);
    //TH2D muon_rtheta("muon_rtheta" ,"" ,180, 0, TMath::TwoPi(), 30, 0, 300);
    TH1D muon_theta("muon_rtheta" ,"" ,180, 0, 360);
    //TCanvas events_canvas("events_canvas", "" ,0 ,0 ,800 ,800);
    for(int i=0; i < tree->GetEntries(); i++) 
    {
        tree->GetEntry(i);
		//event coordinates
		X = EvtVtx[0]*100.;//in centimeters
		Z = EvtVtx[2]*100.;//in centimeters
		Y = EvtVtx[1]*100.;//...
        R0 = sqrt(pow(Z-z0,2)+pow(Y-y0,2));

		if (!EvtCode->String().Contains("Weak[CC]") || abs(Z) > 2569 || abs(Z) < 2214 || R0 >= stt_rmax) continue; //considering only CC events that are not inside that fake LAr on the right and not in the empty part where LAr's supposed to be
		//events_yz.Fill(z, y);						
        
		if (print == "-P")
        {   
            printf("\n ******************************************************************************  EVENT  START  ****************************************************************************************************");
            printf("\n Event code                 : %s", EvtCode->String().Data());
            printf("\n Event x-section            : %10.5f * 1E-38* cm^2",  EvtXSec);
            printf("\n Event kinematics x-section : %10.5f * 1E-38 * cm^2/{K^n}", EvtDXSec);
            printf("\n Event weight               : %10.8f", EvtWght);
            printf("\n Event vertex               : X = %8.2f cm, Y = %8.2f cm, Z = %8.2f cm", X, Y, Z);
            printf("\n *Particle list:");
            printf("\n --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
            printf("\n | ID  | IST | PARTICLE            (PDG)       |   RESCAT  |   MOTHER  |  DAUGHTER |       P_X     |      P_Y      |      P_Z     |       E       |        X      |        Y      |        Z      |");
            printf("\n |     |     |                                 |           |           |           |    (GeV/c)    |    (GeV/c)    |   (GeV/c)    |     (GeV)     |       (m)     |       (m)     |       (m)     |");
            printf("\n --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
        }
		//filling event coords in detector coords (cm)

        for(int ip = 0; ip < StdHepN; ip++) 
        {
            
            mx1 = StdHepX4[StdHepFm[ip]][0]*1.e-13; //mother coordinates w.r.t the original event vertex
            my1 = StdHepX4[StdHepFm[ip]][1]*1.e-13; // ...
            mz1 = StdHepX4[StdHepFm[ip]][2]*1.e-13; // ...
            sx1 = StdHepX4[ip][0]*1.e-13;           //self coordinates w.r.t. the original event vertex
            sy1 = StdHepX4[ip][1]*1.e-13;           //...
            sz1 = StdHepX4[ip][2]*1.e-13;           //...

            sdx = (Y+sy1) - x0;	                    //self coordinates w.r.t the center of the circle (or the barrel axis)
            sdy = (Y+sy1) - y0;	                    //...
            sdz = (Z+sz1) - z0;                     //...
            stheta = 180 - 180. * atan2 (sdy, sdz)/(4.*atan(1)); // moving the theta = 0 from +z to -z
            srad_distance = sqrt(pow(sdy,2) + pow(sdz,2));		// radial distance of the self event from the axis of the barrel
            events_yz.Fill(sz1+Z, sy1+Y);						
           

            mdx = (Y+my1) - x0;	                    //mom coordinates w.r.t the center of the circle (or the barrel axis)
            mdy = (Y+my1) - y0;	                    //...
            mdz = (Z+mz1) - z0;                     //...
            mtheta = 180 - 180. * atan2 (mdy, mdz)/(4.*atan(1)); // moving the theta = 0 from +z to -z
            mrad_distance = sqrt(pow(mdy,2) + pow(mdz,2));		// radial distance of the self event from the axis of the barrel
            
            events_yz.Fill(sz1+Z, sy1+Y);						
           
            //printf("\nz: %-6.1f\t y: %-6.1f\t dz: %-6.1f\t dy: %-6.1f\t rad_distance: %-6.1f\t [%-20s]", z + z1, y + y1, dz, dy, rad_distance, d.where_is(srad_distance).c_str()); 
            //printf("\n%-20s", d.where_is(rad_distance).c_str()); 
            
            muon_theta.Fill(stheta); 
	
			self = StdHepPdg[ip];
			mom = StdHepPdg[StdHepFm[ip]];
            
            energy = StdHepP4[ip][3]*1000.;        
            mom_energy = StdHepP4[StdHepFm[ip]][3]*1000.;        
            
            momentum2 = (pow(StdHepP4[ip][0],2) + pow(StdHepP4[ip][1],2) + pow(StdHepP4[ip][2],2))*1000000;
            mom_momentum2 = (pow(StdHepP4[StdHepFm[ip]][0],2) + pow(StdHepP4[StdHepFm[ip]][1],2) + pow(StdHepP4[StdHepFm[ip]][2],2))*1000000;

            mass = sqrt(pow(energy,2) - momentum2);
            mom_mass = sqrt(pow(mom_energy,2) - mom_momentum2);

			if(StdHepStatus[ip] == -1)  //all particles that ever existed inside the  " + Tpost_vol + "
            {
                if(srad_distance < stt_rmax && abs(Z+sz1) < 2569 && abs(Z+sz1) > 2214)orig_particle_count[self]++;		
                if(abs(StdHepPdg[StdHepFm[ip]]) == abs(mu_nu_pdg) && srad_distance < stt_rmax && abs(Z+sz1) < 2569 && abs(Z+sz1) > 2214)    //mu_nu is mother, hence primary
                {
                    orig_primary_muon_count[self]++;		//all particles that ever existed inside the  " + Tpost_vol + "
                    //std::cout << "\033[41mOriginal primary muon\033[49m[" << orig_primary_muon_count[self] << "]\n";
                }
                if (abs(StdHepPdg[StdHepFm[ip]]) != abs(mu_nu_pdg) )//mu_nu is not its mother, neither itself
                {
                    orig_secondary_muon_count[self]++;		//all particles that ever existed inside the  " + Tpost_vol + "
                    //std::cout << "\033[44mOriginal primary muon\033[49m[" << orig_secondary_muon_count[self] << "]\n";
                }
            }

			if (std::find(allPdg.begin(), allPdg.end(), StdHepPdg[ip]) == allPdg.end()) 
			{
				  // someName not in name, add it
				  //allPdg.push_back(self);
				  allPdg.push_back(StdHepPdg[ip]);
			}
            if (print == "-P")
            {   
                printf("\n | %-3d | %-3d | %-20s%-10d  | %-6d    | %-3d | %-3d | %-3d | %-3d | %+.2e     | %+.2e     | %+.2e    | %.2e      | %+.2e     | %+.2e     | %+.2e     |",
                ip, StdHepStatus[ip],  my_pdg.GetName(StdHepPdg[ip]).c_str(), StdHepPdg[ip], StdHepRescat[ip], 
                StdHepFm[ip],  StdHepLm[ip], StdHepFd[ip],  StdHepLd[ip],
                StdHepP4[ip][0], StdHepP4[ip][1], StdHepP4[ip][2], StdHepP4[ip][3],
                StdHepX4[ip][0]*1.e-13, StdHepX4[ip][1]*1.e-13, StdHepX4[ip][2]*1.e-13);
				
			}
			
            pdg[self] = StdHepPdg[ip];

			if (StdHepStatus[ip] == 1)
			{
				if (print2 == "-Q")printf("\n ..................................................................................................................................................................................................");
				if (StdHepPdg[ip] == StdHepPdg[StdHepFm[ip]] && ip == StdHepFd[StdHepFm[ip]] && StdHepStatus[StdHepFm[ip]] == -1)
				{
					if (print2 == "-Q")
					{
						printf("\n\033[92m\t%s has crossed the %s, was produced in %s\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), d.where_is(srad_distance).c_str());
					}
                    //muon hist fill
					if((StdHepPdg[ip])==mu_pdg)//muminus
                    {
                        //if (StdHepPdg[StdHepFm[StdHepFm[ip]]] != mu_nu_pdg)std::cout << "\033[44m\nCrossed secondary muon\033[49m[" << crossed_secondary_muon_count[self] << "]\n";
                        
                        if(energy>maxE_muon)maxE_muon=energy;
                        if(energy<minE_muon)minE_muon=energy;
                        if(momentum2>maxP2_muon)maxP2_muon=momentum2;
                        if(momentum2<minP2_muon)minP2_muon=momentum2;
                        crossed_muminus_mass.Fill(mass);  
                        crossed_muminus_mom_mass.Fill(mom_mass); 
                        if (abs(StdHepPdg[StdHepFm[StdHepFm[ip]]]) == abs(mu_nu_pdg) )
                        {
                            if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_primary_muminus_energy.Fill(energy);  
                            if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_primary_muminus_mom_energy.Fill(mom_energy);
                            if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_primary_muon_count[self]++;
                        }
                        else if (abs(StdHepPdg[StdHepFm[StdHepFm[ip]]]) != abs(mu_pdg))
                        {
                            crossed_secondary_muminus_energy.Fill(energy);  
                            crossed_secondary_muminus_mom_energy.Fill(mom_energy);
                            crossed_secondary_muon_count[self]++;
                        }
						if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_muminus_mom_disp.Fill(mom_momentum2, pow(mom_energy,2));
						if(srad_distance < stt_rmax && abs(Z+sz1) < 2569 && abs(Z+sz1) > 2214)crossed_muminus_disp.Fill(momentum2, pow(energy,2));
                    }
					else if((StdHepPdg[ip]) == -mu_pdg) //muplus
                    {
                        //if (StdHepPdg[StdHepFm[StdHepFm[ip]]] != mu_nu_pdg)std::cout << "\033[44m\nCrossed secondary muon\033[49m[" << crossed_secondary_muon_count[self] << "]\n";
                        if(energy>maxE_muon)maxE_muon=energy;
                        if(energy<minE_muon)minE_muon=energy;
                        if(momentum2>maxP2_muon)maxP2_muon=momentum2;
                        if(momentum2<minP2_muon)minP2_muon=momentum2;
                        if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_muplus_mom_mass.Fill(mom_mass);  
                        if(srad_distance < stt_rmax && abs(Z+sz1) < 2569 && abs(Z+sz1) > 2214)crossed_muplus_mass.Fill(mass); 
                        if (abs(StdHepPdg[StdHepFm[StdHepFm[ip]]]) == abs(mu_nu_pdg))
                        {
                            if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_primary_muplus_energy.Fill(energy);  
                            if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_primary_muplus_mom_energy.Fill(mom_energy);
                            if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_primary_muon_count[self]++;
                        }
                        else if ( abs(StdHepPdg[StdHepFm[StdHepFm[ip]]]) != abs(mu_pdg))
                        {
                            crossed_secondary_muplus_energy.Fill(energy);  
                            crossed_secondary_muplus_mom_energy.Fill(mom_energy);
                            crossed_secondary_muon_count[self]++;
                        }
						crossed_muplus_mom_disp.Fill(mom_momentum2, pow(mom_energy,2));
						crossed_muplus_disp.Fill(momentum2, pow(energy,2));
                    }
					
                    //pion hist fill
                    if((StdHepPdg[ip])==piminus_pdg)
                    { 
                        if(energy>maxE_pion)maxE_pion=energy;
                        if(energy<minE_pion)minE_pion=energy;
                        if(momentum2>maxP2_pion)maxP2_pion=momentum2;
                        if(momentum2<minP2_pion)minP2_pion=momentum2;
                        if(srad_distance < stt_rmax && abs(Z+sz1) < 2569 && abs(Z+sz1) > 2214)crossed_piminus_mass.Fill(mass);  
                        if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_piminus_mom_mass.Fill(mom_mass); 
                        if(srad_distance < stt_rmax && abs(Z+sz1) < 2569 && abs(Z+sz1) > 2214)crossed_piminus_energy.Fill(energy);  
                        if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_piminus_mom_energy.Fill(mom_energy);
						if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_piminus_mom_disp.Fill(mom_momentum2, pow(mom_energy,2));
						if(srad_distance < stt_rmax && abs(Z+sz1) < 2569 && abs(Z+sz1) > 2214)crossed_piminus_disp.Fill(momentum2, pow(energy,2));
                    }
                    //counter
                    if(mrad_distance < stt_rmax && abs(Z+mz1) < 2569 && abs(Z+mz1) > 2214)crossed_particle_count[self]++;

				} 
				if (StdHepPdg[ip] != StdHepPdg[StdHepFm[ip]] || (ip != StdHepFd[StdHepFm[ip]])) //self != mom particle-wise, or self = mom but self != first daughter of the mom, to ensure that it's not itself that crosses
				{
					if (print2 == "-Q")
					{   
						if(StdHepStatus[StdHepFm[ip]] == -1) // this section is not itself that crosses... but its other daughters
						{
							if(ip != StdHepFd[StdHepFm[ip]] && StdHepPdg[StdHepFd[StdHepFm[ip]]] == StdHepPdg[StdHepFm[ip]])printf("\n\033[38;5;193m\t%s crossed the %s originating (vol: %s) from pre-%s %s that later crossed the %s too \033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), d.where_is(srad_distance).c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), post_vol.c_str());
							if(ip != StdHepFd[StdHepFm[ip]] && StdHepPdg[StdHepFd[StdHepFm[ip]]] != StdHepPdg[StdHepFm[ip]])printf("\n\033[38;5;131m\t%s crossed the %s from pre-%s decayed %s (vol: %s)\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), d.where_is(srad_distance).c_str() );
							if(ip == StdHepFd[StdHepFm[ip]] && StdHepPdg[StdHepFd[StdHepFm[ip]]] != StdHepPdg[StdHepFm[ip]])printf("\n\033[38;5;124m\t%s crossed the %s from pre-%s decayed %s (vol: %s)\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), d.where_is(srad_distance).c_str());
						}
						
						if(StdHepStatus[StdHepFm[ip]] == 0 )printf("\n\t%s produced from a post-%s initial state %s (vol: %s)", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), d.where_is(srad_distance).c_str());
						if(StdHepStatus[StdHepFm[ip]] == 2 )printf("\n\033[93m\t%s produced from a post-%s intermediate %s (vol: %s)\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), d.where_is(srad_distance).c_str());
						if(StdHepStatus[StdHepFm[ip]] == 3 )printf("\n\033[91m\t%s produced from a post-%s %s decay (vol: %s)\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), d.where_is(srad_distance).c_str());
						if(StdHepStatus[StdHepFm[ip]] == 11)printf("\n\033[94m\t%s produced from a post-%s nucleon target %s (vol: %s)\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), d.where_is(srad_distance).c_str());
						if(StdHepStatus[StdHepFm[ip]] == 12)printf("\n\033[96m\t%s produced from a post-%s pre-fragm. hadr. state %s has crossed the %s\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), post_vol.c_str());
						if(StdHepStatus[StdHepFm[ip]] == 13)printf("\n\033[38;5;208m\t%s produced from a post-%s resonant pre-decayed has crossed the %s%s\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str(), post_vol.c_str());
						if(StdHepStatus[StdHepFm[ip]] == 14)printf("\n\033[38;5;129m\t%s got released from inside a post-%s neclus\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str());
						if(StdHepStatus[StdHepFm[ip]] == 15)printf("\n\033[95m\t%s a remnant neucleus coming from %s\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), my_pdg.GetName(StdHepPdg[StdHepFm[ip]]).c_str());
					}
                    //mu- fill
					if((StdHepPdg[ip])==mu_pdg)
                    { 
                        if(energy>maxE_muon)maxE_muon=energy;
                        if(energy<minE_muon)minE_muon=energy;
                        if(momentum2>maxP2_muon)maxP2_muon=momentum2;
                        if(momentum2<minP2_muon)minP2_muon=momentum2;
                        if(srad_distance > rock_rmin)new_muminus_mass.Fill(mass);  
                        if (abs(StdHepPdg[StdHepFm[ip]]) == abs(mu_nu_pdg) )
                        {
                            if(srad_distance > rock_rmin)new_primary_muminus_energy.Fill(energy);  
                            if(srad_distance > rock_rmin)new_primary_muon_count[self]++;
                        }
                        else if ( abs(StdHepPdg[StdHepFm[ip]]) != abs(mu_pdg) )
                        {
                            if(srad_distance > rock_rmin)new_secondary_muminus_energy.Fill(energy);  
                            if(srad_distance > rock_rmin)new_secondary_muon_count[self]++;
                        }
						new_muminus_disp.Fill(momentum2, pow(energy,2));
                    }
                    //mu+ fill
					else if((StdHepPdg[ip])==-mu_pdg)
                    { 
                        if(energy>maxE_muon)maxE_muon=energy;
                        if(energy<minE_muon)minE_muon=energy;
                        if(momentum2>maxP2_muon)maxP2_muon=momentum2;
                        if(momentum2<minP2_muon)minP2_muon=momentum2;
                        if(srad_distance > rock_rmin)new_muplus_mass.Fill(mass);  
                        if ( abs(StdHepPdg[StdHepFm[ip]]) == abs(mu_nu_pdg) )
                        {
                            if(srad_distance > rock_rmin)new_primary_muplus_energy.Fill(energy);  
                            if(srad_distance > rock_rmin)new_primary_muon_count[self]++;
                        }
                        else if ( abs(StdHepPdg[StdHepFm[ip]]) != abs(mu_pdg) )
                        {
                            if(srad_distance > rock_rmin)new_secondary_muplus_energy.Fill(energy);  
                            if(srad_distance > rock_rmin)new_secondary_muon_count[self]++;
                        }
						if(srad_distance > rock_rmin)new_muplus_disp.Fill(momentum2, pow(energy,2));
                    }
					
					//pion fill
					if((StdHepPdg[ip])==piminus_pdg)
                    { 
                        if(energy>maxE_pion)maxE_pion=energy;
                        if(energy<minE_pion)minE_pion=energy;
                        if(momentum2>maxP2_pion)maxP2_pion=momentum2;
                        if(momentum2<minP2_pion)minP2_pion=momentum2;
                        if(energy>maxE_pion)maxE_pion=energy;
                        if(energy<minE_pion)minE_pion=energy;
                        if(momentum2>maxP2_pion)maxP2_pion=momentum2;
                        if(momentum2<minP2_pion)minP2_pion=momentum2;
                        if(srad_distance > rock_rmin)new_piminus_mass.Fill(mass);  
                        if(srad_distance > rock_rmin)new_piminus_energy.Fill(energy);  
						if(srad_distance > rock_rmin)new_piminus_disp.Fill(momentum2, pow(energy,2));
                    }
					//counting 
                    if(srad_distance > rock_rmin)new_particle_count[self]++;
				}
				if (print2 == "-Q")printf("\n ..................................................................................................................................................................................................");
			}
			else if ((StdHepPdg[ip] != StdHepPdg[StdHepFm[ip]]) && (StdHepPdg[ip] != StdHepPdg[StdHepFd[ip]]) && StdHepStatus[ip] == -1 && srad_distance < rock_rmin)
			{
				if (print2 == "-Q")
				{
					printf("\n ..................................................................................................................................................................................................");
					printf("\n\033[38;5;89m\t%s is stuck inside the %s\033[0m", my_pdg.GetName(StdHepPdg[ip]).c_str(), post_vol.c_str());
					printf("\n ..................................................................................................................................................................................................");
				}
                //mu- filling
                if((StdHepPdg[ip])==mu_pdg)
                { 
                    //if(StdHepFd[ip] != -1 || StdHepLd[ip] != -1)std::cout << "\033[41m\nSTUCK MUON ===================================================>>>>\033[49m \n";
                    if(energy>maxE_muon)maxE_muon=energy;
                    if(energy<minE_muon)minE_muon=energy;
                    if(momentum2>maxP2_muon)maxP2_muon=momentum2;
                    if(momentum2<minP2_muon)minP2_muon=momentum2;
                    stuck_muminus_mass.Fill(mass);  
                    if ( abs(StdHepPdg[StdHepFm[ip]]) == abs(mu_nu_pdg) )
                    {
                        if(srad_distance < rock_rmin)stuck_primary_muminus_energy.Fill(energy);  
                        if(srad_distance < rock_rmin)stuck_primary_muon_count[self]++;
                    }
                    else if ( abs(StdHepPdg[StdHepFm[ip]]) != abs(mu_pdg) )
                    {
                        if(srad_distance < rock_rmin)stuck_secondary_muminus_energy.Fill(energy);  
                        if(srad_distance < rock_rmin)stuck_secondary_muon_count[self]++;
                        //std::cout << "\033[42mStuck secondary:\033[49m " << stuck_secondary_muon_count[13]  << "/" << orig_secondary_muon_count[13]<< "\n";
                        //sleep(1);
                    }
					if(srad_distance < rock_rmin)stuck_muminus_disp.Fill(momentum2, pow(energy,2));
                }
                //mu+ filling
                if((StdHepPdg[ip]) == -mu_pdg)
                { 
                    //if(StdHepFd[ip] != -1 || StdHepLd[ip] != -1)std::cout << "\033[41m\nSTUCK MUON ===================================================>>>>\033[49m \n";
                    if(energy>maxE_muon)maxE_muon=energy;
                    if(energy<minE_muon)minE_muon=energy;
                    if(momentum2>maxP2_muon)maxP2_muon=momentum2;
                    if(momentum2<minP2_muon)minP2_muon=momentum2;
                    stuck_muplus_mass.Fill(mass);  
                    if ( abs(StdHepPdg[StdHepFm[ip]]) == abs(mu_nu_pdg) )
                    {
                        if(srad_distance < rock_rmin)stuck_primary_muplus_energy.Fill(energy);  
                        if(srad_distance < rock_rmin)stuck_primary_muon_count[self]++;
                    }
                    else if ( abs(StdHepPdg[StdHepFm[ip]]) != abs(mu_pdg) )
                    {
                        if(srad_distance < rock_rmin)stuck_secondary_muplus_energy.Fill(energy);  
                        if(srad_distance < rock_rmin)stuck_secondary_muon_count[self]++;
                        //std::cout << "\033[42mStuck secondary:\033[49m " << stuck_secondary_muon_count[13]  << "/" << orig_secondary_muon_count[13]<< "\n";
                        //sleep(1);
                    }
					if(srad_distance < rock_rmin)stuck_muplus_disp.Fill(momentum2, pow(energy,2));
                }

                //pion filling
                if((StdHepPdg[ip])==piminus_pdg)
                { 
                    if(energy>maxE_pion)maxE_pion=energy;
                    if(energy<minE_pion)minE_pion=energy;
                    if(momentum2>maxP2_pion)maxP2_pion=momentum2;
                    if(momentum2<minP2_pion)minP2_pion=momentum2;
                    if(srad_distance < rock_rmin)stuck_piminus_mass.Fill(mass);  
                    if(srad_distance < rock_rmin)stuck_piminus_energy.Fill(energy);  
					if(srad_distance < rock_rmin)stuck_piminus_disp.Fill(momentum2, pow(energy,2));
                }
                //counting 
				if(srad_distance < rock_rmin)stuck_particle_count[self]++;
			}
            //if(StdHepPdg[ip]==mu_pdg)std::cout << "Stuck primary: " << 100.0*stuck_primary_muon_count[13] / orig_primary_muon_count[13]<< "\n";
        } 
		if (print == "-P" )
		{   
            printf("\n --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			printf("\n *Flux Info:");
			printf("\n Parent hadron pdg code    : %d", NuParentPdg);
			printf("\n Parent hadron decay mode  : %d", NuParentDecMode);
			printf("\n Parent hadron 4p at decay : Px = %6.3f GeV/c, Py = %6.3f GeV/c, Pz = %6.3f GeV/c, E = %6.3f GeV", 
					   NuParentDecP4[0], NuParentDecP4[1], NuParentDecP4[2], NuParentDecP4[3]);
			printf("\n Parent hadron 4p at prod. : Px = %6.3f GeV/c, Py = %6.3f GeV/c, Pz = %6.3f GeV/c, E = %6.3f GeV", 
					   NuParentProP4[0], NuParentProP4[1], NuParentProP4[2], NuParentProP4[3]);
			printf("\n Parent hadron 4x at decay : x = %6.3f m, y = %6.3f m, z = %6.3f m, t = %6.3f s", 
					   NuParentDecX4[0], NuParentDecX4[1], NuParentDecX4[2], NuParentDecX4[3]);
			printf("\n Parent hadron 4x at prod. : x = %6.3f m, y = %6.3f m, z = %6.3f m, t = %6.3f s", 
					   NuParentProX4[0], NuParentProX4[1], NuParentProX4[2], NuParentProX4[3]);
            printf("\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ END OF THE EVENT ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n");
		}
    }
    printf("\n");
    file.Close();
    //printf(" ..............................................................................................................................................");
	printf ("\nROCK BOUNDARY: %20s \n",post_vol.c_str());
	printf ("\n******************************************************************************");
	printf ("\n|        PARTICLE      | CROSSED  %% OF   |  POST  |  STUCK  %% OF    |  ORIG  |");
	printf ("\n|                      |          ORIG   |  ROCK  |         ORIG    |        |");
	printf ("\n******************************************************************************");
    double total_orig = 0;
	for(size_t i = 0; i<allPdg.size(); ++i)
	{
		self = allPdg.at(i);
        crossed_particle_percentage[self] = 100.*crossed_particle_count[self]/orig_particle_count[self];
        stuck_particle_percentage[self] = 100.*stuck_particle_count[self]/orig_particle_count[self];
        if (crossed_particle_percentage[self] != crossed_particle_percentage[self])crossed_particle_percentage[self] = 0;
        if (stuck_particle_percentage[self] != stuck_particle_percentage[self])stuck_particle_percentage[self] = 0;
		if ((int)(orig_particle_count[self]) > 0 || (int)(stuck_particle_count[self]) > 0 || (int)(crossed_particle_count[self]) > 0 || (int)(new_particle_count[self]) > 0)printf ("\n| %-20s | %-6d  %-5.1f%%  | %-6d | %-6d  %-5.1f%%  | %-6d |", my_pdg.GetName(allPdg.at(i)).c_str(), (int)(crossed_particle_count[self]), crossed_particle_percentage[self], (int)(new_particle_count[self]), (int)(stuck_particle_count[self]), stuck_particle_percentage[self], (int)(orig_particle_count[self]));
	}
	printf ("\n******************************************************************************");
    printf("\n");
    //printf(" ..............................................................................................................................................");
	printf ("\n**********************************************************************************************************************************");
	printf ("\n|       PARTICLE       | CROSSED  %% OF   | CROSSED  %% OF    |  POST  |  STUCK  %% OF    |   STUCK  %% OF    |   ORIG  |    ORIG    |");
	printf ("\n|                      | PRIMARY  ORIG   | SECONDARY ORIG   |  ROCK  | PRIMARY ORIG    | SECONDARY ORIG   | PRIMARY |  SECONDARY |");
	printf ("\n**********************************************************************************************************************************");
    //double total_orig = 0;
	for(int i : {13, -13})
	{
        self = i;
        crossed_primary_muon_percentage[self] = 100.*crossed_primary_muon_count[self]/orig_primary_muon_count[self];
        stuck_primary_muon_percentage[self] = 100.*stuck_primary_muon_count[self]/orig_primary_muon_count[self];
        crossed_secondary_muon_percentage[self] = 100.*crossed_secondary_muon_count[self]/orig_secondary_muon_count[self];
        stuck_secondary_muon_percentage[self] = 100.*stuck_secondary_muon_count[self]/orig_secondary_muon_count[self];
        
        if (stuck_primary_muon_percentage[self] != stuck_primary_muon_percentage[self])stuck_primary_muon_percentage[self] = 0;
        if (crossed_primary_muon_percentage[self] != crossed_primary_muon_percentage[self])crossed_primary_muon_percentage[self] = 0;
        if (stuck_secondary_muon_percentage[self] != stuck_secondary_muon_percentage[self])stuck_secondary_muon_percentage[self] = 0;
        if (crossed_secondary_muon_percentage[self] != crossed_secondary_muon_percentage[self])crossed_secondary_muon_percentage[self] = 0;
		
        if ((int)(orig_primary_muon_count[self]) > 0 || (int)(stuck_primary_muon_count[self]) > 0 || (int)(crossed_primary_muon_count[self]) > 0 || (int)(new_primary_muon_count[self]) > 0)
        {
            printf ("\n| %-20s | %-6d  %-5.1f%%  | %-6d  %-5.1f%%   | %-6d | %-6d  %-5.1f%%  | %-6d  %-5.1f%%   | %-6d  | %-6d     |", my_pdg.GetName(self).c_str(), (int)(crossed_primary_muon_count[self]), crossed_primary_muon_percentage[self], (int)(crossed_secondary_muon_count[self]), crossed_secondary_muon_percentage[self], (int)(new_primary_muon_count[self]), (int)(stuck_primary_muon_count[self]), stuck_primary_muon_percentage[self], (int)(stuck_secondary_muon_count[self]), stuck_secondary_muon_percentage[self], (int)(orig_primary_muon_count[self]), (int)(orig_secondary_muon_count[self]));
        }
	}
    //double total_orig = 0;
	printf ("\n----------------------------------------------------------------------------------------------------------------------------------");
	printf ("\n|                      | CROSSED  %% OF   |                  |  POST  |  STUCK  %% OF    |                  |   ORIG  |            |");
	printf ("\n|                      |          ORIG   |                  |  ROCK  |         ORIG    |                  |         |            |");
	printf ("\n----------------------------------------------------------------------------------------------------------------------------------");
	for(int i : {-211, 211})
	{
        self = i;
        crossed_particle_percentage[self] = 100.*crossed_particle_count[self]/orig_particle_count[self];
        stuck_particle_percentage[self] = 100.*stuck_particle_count[self]/orig_particle_count[self];
        
        if (stuck_particle_percentage[self] != stuck_particle_percentage[self])stuck_particle_percentage[self] = 0;
        if (crossed_particle_percentage[self] != crossed_particle_percentage[self])crossed_particle_percentage[self] = 0;
		
        if ((int)(orig_particle_count[self]) > 0 || (int)(stuck_particle_count[self]) > 0 || (int)(crossed_particle_count[self]) > 0 || (int)(new_particle_count[self]) > 0)
        {
            printf ("\n| %-20s | %-6d  %-5.1f%%  |   %-6s %-5s   | %-6d |  %-6d %-5.1f%%  |   %-6s %-5s   | %-6d  |   %-6s   |", my_pdg.GetName(self).c_str(), (int)(crossed_particle_count[self]), crossed_particle_percentage[self], "", "", (int)(new_particle_count[self]), (int)(stuck_particle_count[self]), stuck_particle_percentage[self], "", "", (int)orig_particle_count[self], "");
        }
	}
	printf ("\n**********************************************************************************************************************************");
	printf("\n");


	if (print3 == "-D")
	{
		gStyle->SetOptFit(1);
		gStyle->SetOptStat(111);
        
		// event circle ------------------------------------------------------
		//events_yz.Draw();
			
		//linear fit function
		//
		TF1 line("line","pol1",minP2_muon,maxP2_muon);
		line.SetParNames("m^{2}","dE^{2}/dp^{2}");
        line.SetLineStyle(9);
        line.SetLineColor(kBlack);
		//FOR MUON ----------------------------------------------------------------------------
		line.SetParameter(0,muon_mass);
		line.SetParameter(1,1);
		
		TCanvas canvas("canvas","",0,0,800,800);
		canvas.Divide(3,2);
        TExec ex1("ex1","TGaxis::SetMaxDigits(4);");
        ex1.Draw();
		//primaries  	
		canvas.cd(1);
		crossed_primary_muminus_energy.Draw();
		canvas.Update();
        canvas.cd(2);
		stuck_primary_muminus_energy.Draw();
		canvas.Update();
        canvas.cd(3);
		new_primary_muminus_energy.Draw();
		//secondaries	
		canvas.cd(4);
		crossed_secondary_muminus_energy.Draw();
		canvas.cd(5);
		stuck_secondary_muminus_energy.Draw();
		canvas.cd(6);
		new_secondary_muminus_energy.Draw();

        
        
		TCanvas canvas2("canvas2","",0,0,800,800);
		canvas2.Divide(2,1);
		//muon_rtheta.Draw("COLZ");
		//muon_rtheta.Draw("SURF7 POL");
		//TH2D dum("dum","",150,-150,150, 150, -150, 150);
		//dum.Draw("colz");
		//muon_rtheta.Draw("pol col same");
		canvas2.cd(1);
		muon_theta.Draw();
		canvas2.cd(2);
		//events_yz.Draw("colz");
		events_yz.Draw();
		canvas2.Update();
		
		std::cout << "DONE PLOTTING\n";
		
		
		rack.Run();
	}



	return 0;
}



