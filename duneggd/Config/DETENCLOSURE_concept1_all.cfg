# How to run, from the dunendggd directory:
# gegede-cli  duneggd/Config/KLOE.cfg duneggd/Config/KLOESTT.cfg \
# duneggd/Config/DETENCLOSURE_concept1_all.cfg \
# duneggd/Config/ArgonCube/*.cfg \ 
# duneggd/Config/WORLDggd.cfg -w World -o example.gdml
# leave off KLOE stuff if not building KLOE

[DetEnclosure]
class               = duneggd.DetEnc.DetEncBuilder
Material            = 'Air'
# Mike Kordosky: dimension choosen here to exactly match
# the hall used by the ND task force  (site.xml)
halfDimension       = {'dx':Q('899.16cm'),'dy':Q('768.096cm'),'dz':Q('1501.61625cm')}

####Comment in or out the following sections to switch from IronDipole to KLOE
######## Argon Cube + IronDipole
subbuilders         = ['ArgonCubeDetector','IronDipole']
Positions	    = [	[ Q("0m"), Q("-146.8cm"), Q("-425.6cm") ],
	              [ Q("0m"), Q("-214.9cm"), Q("384.4cm") ] ,
	              [ Q("0m"), Q("0m"), Q("0m") ] ]
Rotations	    = [	[ Q("0deg"), Q("0deg"), Q("0deg") ],
		      	[ Q("0deg"), Q("0deg"), Q("0deg") ] ,
		      	[ Q("0deg"), Q("0deg"), Q("0deg") ] ]

####### Argon Cube + KLOE
#subbuilders         = ['ArgonCubeDetector','KLOE']
#Positions	    = [	[ Q("0m"), Q("-146.8cm"), Q("-425.6cm") ],
#	              [ Q("0m"), Q("-208.8cm"), Q("324.4cm") ] ,
#	              [ Q("0m"), Q("0m"), Q("0m") ] ]
#Rotations	    = [	[ Q("0deg"), Q("0deg"), Q("0deg") ],
#		      	[ Q("0deg"), Q("90deg"), Q("0deg") ] ,
#		      	[ Q("0deg"), Q("0deg"), Q("0deg") ] ]

[IronDipole]
class = duneggd.Det.IronDipole.IronDipoleBuilder
#subbuilders = ['MuIDBarrel', 'MuIDDownstream', 'MuIDUpstream', 'ECALDownstream', 'ECALUpstream', 'ECALBarrel', 'Magnet']
subbuilders = ['Magnet','ECALDownstream', 'ECALBarrel','ECALUpstream','STT','A3DST','GArTPC']
#subbuilders = ['Magnet']
innerDetBField =  ("0.4 T, 0.0 T, 0.0 T")

eaclDownRot='noRotate'
eaclBarRot ='noRotate'
eaclUpRot = 'r180aboutY'

# Many numbers here depend on numbers below
# Unfortuantely, I can't make the lines like this one work: below work
#ecalDnZ={Magnet:actDimension}[0]/2.0-{ECALDownstream:modEcalThickness} -Q("0.5cm")
ecalDnZ=Q("810cm")/2.0-Q("70.5cm")/2.0-Q("0.5cm") # number here depend on numbers below...
ecalDnPos  = [Q('0.cm'),Q('0.cm'),ecalDnZ]

ecalUpZ=-Q("810cm")/2.0+Q("21.6cm")/2.0+Q("0.5cm") # number here depend on numbers below...
ecalUpPos  = [Q('0.cm'),Q('0.cm'),ecalUpZ]

ecalBaPos  = [Q("0cm"),Q("0cm"),Q('0.cm')]
magPos     = [Q('0.cm'),Q('0.cm'),Q('0.cm')]

##### Dipole STT, 3DST and GArTPC
buildSTT=True # True builds STT
# Nov 17 CERN workshop
#STTPos = [Q("0cm"),Q("0cm"),Q("25.5cm")]
# After workshop (location along z is a little arbitrary, chosen by eye)
STTPos = [Q("0cm"),Q("0cm"),Q("-30cm")]

buildA3DST=False
A3DSTPos = [Q("0cm"),Q("0cm"),Q("-284cm")] #3DSTPos is an illegal label in python --> leads with a number

buildGArTPC=False # if STT is true probably want to set this to False
GArTPCPos = [Q("0cm"),Q("0cm"),Q("25.5cm")]
# GArTPCRot needs to be changed to agree with direction of {GArTPC:Drift}
#GArTPCRot = [Q("0deg"),Q("90deg"),Q("0deg")] # for cylinder axis along x
GArTPCRot = [Q("0deg"),Q("0deg"),Q("0deg")] # for cylinder axis along z

#muidUpRot='noRotate'
#muidDownRot='r180aboutY'
#muidUpRot='noRotate'


###############################
# Dipole Magnet
###############################
[Magnet]
# see lbne doc-10942
class         = duneggd.SubDetector.Magnet.MagnetBuilder
actDimension  = [Q('112cm'),Q('450cm'),Q('810cm')] # inner coil dimensions, one segment
actDimensionB = [Q('450cm'),Q('500cm'),Q('99.5cm')] # inner yoke dimensions, one segment
actThickness  = Q('25cm') # thickness of the coil
actThicknessB = Q('60cm') # thickness of the yoke iron
# this is just the iron now, real design has 10cm plates with 5cm gaps, total 85cm thick
Location      = [Q('0.cm'),Q('0.cm'),Q('0.cm')]
nMag          = 4 # number of coil segments (segmented along x)
nMagB         = 8 # number of yoke segments (segmented along z)
magGap        = Q('0.5cm') # gap between coil segments (adds some length along x)
magBGap       = Q('0.5cm') # gap between yoke segments (adds some length along z)
actMaterial   = 'MagnetCoil' # coil is made of a copper water mix
actMaterialB  = 'Iron'

##############################################
#ECAL with scintillator
##############################################

#Loading scintillator bar part in Active
[SB] # these are not actually made but the dimensions are used by SBPlane
class              = duneggd.Active.RectBarHalf.RectBarBuilder
actDimension       = [Q('2.5cm'), Q('3.2m'), Q('1cm')] # nominal dimensions of a scintillator bar
actMaterial        = 'Scintillator'
Sensitive          = 'SB'


[SBPlaneDS]
subbuilders        = ['SB'] # doesn't use it.
specificName = 'DS'
class              = duneggd.Component.Plane.SBPlaneBuilder
compNElements         = 160
compDimension        = [Q('2.5cm'), Q('4.0m'), Q('1cm')]
compSBPlaneMat         = 'epoxy_resin'
compScintBarMat        = 'Scintillator'
compRotation   = 'noRotate'

[SBPlaneUS]
subbuilders        = ['SB'] # doesn't use it.
specificName = 'US'
class              = duneggd.Component.Plane.SBPlaneBuilder
compNElements         = 160
compDimension        = [Q('2.5cm'), Q('4.0m'), Q('1cm')]
compSBPlaneMat         = 'epoxy_resin'
compScintBarMat        = 'Scintillator'
compRotation   = 'noRotate'


#Loading downstream ECAL
[ECALDownstream]
subbuilders   = ['SBPlaneUS']
class         = duneggd.SubDetector.ECALMod.ECALModBuilder
# this builder makes a big block of lead and then displaces some of it with scintillator planes :(
modEcalMat       = 'Lead'
modScintMat      = 'Scintillator'
modEcalThickness = Q('70.5cm')
modLeadThickness = Q('1.75mm')
modNElements  = 60
zXtra            = Q('0mm') #what for? looks like an offset to move planes around inside of lead
# set to width of one lead plate to try and make a lead plate upstream of first scintillator plane
modRotPlaneOdd = 'r90aboutZ' # make odd planes measure y (strips run along x), even planes measure x


#Loading upstream ECAL based on downstream ECAL
[ECALUpstream]
subbuilders   = ['SBPlaneDS']
class         = {ECALDownstream:class}
modEcalMat       = {ECALDownstream:modEcalMat}
modScintMat      = {ECALDownstream:modScintMat}
modEcalThickness = Q('21.6cm')
modLeadThickness = Q('3.5mm')
modNElements  = 16
zXtra=Q("0cm")
#nSBPlanes      = 1
#able to add "modRotPlaneEven" or "modRotPlaneEven"


[SBPlaneBA]
subbuilders        = ['SB'] # doesn't use it.
specificName = 'BA'
class              = duneggd.Component.Plane.SBPlaneBuilder
compNElements         = 128
compDimension        = {SB:actDimension}
compSBPlaneMat         = 'epoxy_resin'
compScintBarMat        = 'Scintillator'
compRotation   = 'noRotate'


#Loading ECal barrel SubDetector based on downstream ECAL
[ECALBarrelMod]
subbuilders    = ['SBPlaneBA']
class          = {ECALDownstream:class}
modEcalMat        = {ECALDownstream:modEcalMat}
modScintMat       = {ECALDownstream:modScintMat}
modEcalThickness  = {ECALUpstream:modEcalThickness}
modLeadThickness  = {ECALUpstream:modLeadThickness}
modNElements      = {ECALUpstream:modNElements}
zXtra             = Q('0m')
modAltPlaneOrient = False
#able to add "modRotPlaneEven" or "modRotPlaneEven"

#Loading ECal barrel based on ECal barrel SubDetector
[ECALBarrel]
class            = duneggd.SubDetector.ECALBarrel.ECALBarrelBuilder
subbuilders      = ['ECALBarrelMod'] # stt so the SubDetectors can be placed around stt dim
modEcalMat          = 'Air'
modScintMat         = {ECALDownstream:modScintMat}
#modSTubeEndsToLead  = Q('8cm')
modSTubeEndsToLead  = Q('0cm')
# MAK: modInnerDimension is the inner dimension of the ecal barrel
# It's not an ideal choice...
# The outer dimension is what actually has to fit inside the magnet...
# Also, confusingly, this ends up being called "sttDimension" in the code
modInnerDimension     = [Q('450cm')-{ECALBarrelMod:modEcalThickness}*2,Q('450cm')-{ECALBarrelMod:modEcalThickness}*2,Q('810cm')] # ends up being sttDimension in code...



##############################################################################
# The STT
##############################################################################
[STT]
# MAK: the class name is a misnomer, there is nothing "KLOE" about it
class               = duneggd.SubDetector.KLOESTT.KLOESTTBuilder
subbuilders         = ['STTModule']
Material	    = "Air"
# X and Z below due to rotation of STTModule from the x,z plane to x,y plane
# CERN Nov 17 workshop design, with 3DST and 720cm long coil inner-z
#halfDimension       = {'dx':{STTModule:modHalfX},'dy':{STTModule:modHalfZ},'dz':Q("256cm")}
#nModules	    = 64 # depends on dimensions, module width and gap... :|

# After workshop, coil width smaller, 810cm long coil inner z, no 3DST
# 80 modules is the reference design.
halfDimension       = {'dx':{STTModule:modHalfX},'dy':{STTModule:modHalfZ},'dz':Q("320cm")}
nModules	    = 80 # depends on dimensions, module width and gap... :|

modWidth	    = Q("7.6cm") # needs to agree with STTModule:modWidth
#modWidth	    = {STTModule:modWidth} # unfortunately doesn't work...
modRot 		    = [Q("90deg"),Q("0deg"),Q("0deg")]
gap		    = Q("4mm") # gives round 8cm per module w/ 7.6cm modWidth
startingOffset	    = Q("0cm") # for fine adjustment of z position of module stack inside of STT volume

[STTModule]
# a module is two STT planes
# each plane has 2 layers of straws oriented in the same direction and offset for a tight packing
# each STTPlane is sandwiched between two radiators Polypropylene radiators
# in the default STT design the whole module is 7.6cm thick (though this is configurable in many ways below)
# the module is arranged in the (x,z) plane
class               = duneggd.Component.STTModule.STTModuleBuilder
subbuilders         = ['STTPlane1','STTPlane2']
Material	    = "Air"
modHalfX	    = Q('175cm')
modHalfZ	    = Q('175cm')
radiatorThickness   = Q("9mm")
planeWithRadiatorThickness = {STTPlane1:planeThickness}+2*radiatorThickness
modGap		    = Q('0.268cm')
modWidth	    = 2*planeWithRadiatorThickness+modGap
planeCenter	    = planeWithRadiatorThickness/2.0 + modGap/2.0
halfDimension       = {'dx':modHalfX,'dy':modWidth/2.0,'dz':modHalfZ}
centerPlane1 	    =  [ Q("0m"), -planeCenter, Q("0m") ]
centerPlane2 	    =  [ Q("0m"), +planeCenter, Q("0m") ]
rotationPlane1	    = [ Q("0deg"), Q("0deg"), Q("0deg") ]
rotationPlane2	    = [ Q("0deg"), Q("90deg"), Q("0deg") ]
radiators	    = True
radiatorOffset	    = 0.5*{STTPlane1:planeThickness}+0.5*radiatorThickness
radiator1HalfDimension = [modHalfX,0.5*radiatorThickness,modHalfZ] # need to be kept in sync
radiator2HalfDimension = [modHalfZ,0.5*radiatorThickness,modHalfX] # with STTPlane1,2 settings... :(

[STTPlane1]
# a plane is two layers of straws oriented in the same direction and offset by 1 radius for a tight packing
class               = duneggd.Component.STTPlane.STTPlaneBuilder
subbuilders         = ['STTStraw1']
# planeThickness = width of plane packed with two planes of straws.
# each plane is like ooooo and the two are layered atop one another
# with the upper plane being shifted left by 1 radius to produce a tight packing
# this gives a width that is (2 + sqrt(3)) * straw radius
# (2 + sqrt(3)) = 3.732
planeThickness = 3.732*{STTStraw1:strawRadius}
halfDimension       = {'dx':{STTModule:modHalfX},'dy':planeThickness/2.0,'dz':{STTModule:modHalfZ}}
#rotation = {STTModule:rotationPlane1}
Material            = 'Air'
# NElements is the number of straws
# set to be equal to #planes * 2 * halflength perpendicular to straw run / straw diameter -1 = here it is 2 * 2 * 164 cm / 1cm /straw - 1 straw
# I would like to make it so that this isn't hardcoded but instead depends on the size of the planes and straws
# but that would mean doing some integer arithmetic (or moving NElements into the code... hmmm)
NElements           = 699

[STTPlane2]
class               = duneggd.Component.STTPlane.STTPlaneBuilder
subbuilders         = ['STTStraw2']
# note, the X vs Z swap is intentional here since plane 2 is rotated 90 degrees
# this is just needed to the way in which STTPlaneBuilder works
# it assumes straws are oriented to run along Z, so you have to build a plane
# that way and then rotate from the builder above it
halfDimension       = {'dx':{STTModule:modHalfZ},'dy':{STTPlane1:planeThickness}/2.0,'dz':{STTModule:modHalfX}}
#rotation = {STTModule:rotationPlane2}
Material            = 'Air'
NElements           = 699

[STTStraw1]
# construct straws for plane 1. They run along X so the module X halflength is
# used to determine the straw lengths here.
class               = duneggd.Active.StrawTube.StrawTubeBuilder
wallThickness	    = Q("70um")
strawRadius	    = Q("0.5cm")
halfDimension       = {'rmin':Q('0.0cm'), 'rmax':strawRadius, 'dz':{STTModule:modHalfZ}}
Material            = 'stGas_Ar'
halfSTDimension     = {'rmin':strawRadius-wallThickness, 'rmax':strawRadius, 'dz':{STTModule:modHalfZ}}
STMaterial          = 'Kapton'
halfWireDimension   = {'rmin':Q('0.0cm'), 'rmax':Q('20um'), 'dz':{STTModule:modHalfZ}}
WireMaterial        = 'Kapton'
Sensitive           = "StrawTracker"

[STTStraw2]
class               = duneggd.Active.StrawTube.StrawTubeBuilder
wallThickness	    = Q("70um")
strawRadius	    = Q("0.5cm")
halfDimension       = {'rmin':Q('0.0cm'), 'rmax':strawRadius, 'dz':{STTModule:modHalfX}}
Material            = 'stGas_Ar'
halfSTDimension     = {'rmin':strawRadius-wallThickness, 'rmax':strawRadius, 'dz':{STTModule:modHalfX}}
STMaterial          = 'Kapton'
halfWireDimension   = {'rmin':Q('0.0cm'), 'rmax':Q('20um'), 'dz':{STTModule:modHalfX}}
WireMaterial        = 'Kapton'
Sensitive           = "StrawTracker"

#############################################
# 3DST
############################################
[A3DST]
class               = duneggd.SubDetector.SimpleSubDetector.SimpleSubDetectorBuilder
subbuilders         = ['3DPlane']
halfDimension       = {'dx':Q('100cm'),'dy':Q('100cm'),'dz':Q('50cm')}
Material            = 'Air'
NElements           = 100
TranspV             = [0,0,1]

[3DPlane]
class               = duneggd.SubDetector.SimpleSubDetector.SimpleSubDetectorBuilder
subbuilders         = ['3DRow']
halfDimension       = {'dx':Q('100cm'),'dy':Q('100cm'),'dz':Q('0.5cm')}
Material            = 'Air'
NElements           = 200
TranspV             = [0,-1,0]

[3DRow]
class               = duneggd.Component.SingleArrangePlane.SingleArrangePlaneBuilder
subbuilders         = ['3DRectBar']
halfDimension       = {'dx':Q('100cm'),'dy':Q('0.5cm'),'dz':Q('0.5cm')}
Material            = 'Air'
NElements           = 200
TranspV             = [-1,0,0]

[3DRectBar]
class               = duneggd.Active.RectBar.RectBarBuilder
Material            = 'Scintillator'
halfDimension       = {'dx':Q('0.5cm'),'dy':Q('0.5cm'),'dz':Q('0.5cm')}
AuxParams           = {"SensDet":"3DScint"}

######################################################
# GArTPC
######################################################
[GArTPC]
class               = duneggd.SubDetector.GArTPC.GArTPCBuilder
subbuilders         = []

# a TPC that fits in the reference dipole with axis of symmetry (TPC's z) and drift along dipole's x
#halfDimension       = {'rmin':Q('0mm'),'rmax':Q('175cm'),'dz':Q('175cm')} # dimensions of the mother vol
#tpcDimension        = {'dx':Q('240cm'),'dy':Q('240cm'),'dz':Q('170cm')} # dimensions of the two of these
#chamberDimension    = { 'r':Q('175cm'),'dz':Q('350cm') } # the
#drift               = 'z'

# a TPC that fits in the reference dipole with axis of symmetry (TPC's z) along dipole's z
# but with drift along x
halfDimension       = {'rmin':Q('0mm'),'rmax':Q('175cm'),'dz':Q('256cm')} # dimensions of the mother vol
tpcDimension        = {'dx':Q('500cm'),'dy':Q('240cm'),'dz':Q('120cm')} # dimensions of the two of these
chamberDimension    = { 'r':Q('175cm'),'dz':Q('512cm') }
drift               = 'x'


BField              = None
GasType            = 'HP_ArCO2'



##############################################
#RPC MuID
##############################################

#Loading RPC part in Active
[RPCPad]
class              = duneggd.Active.RPCPad.RPCPadBuilder
actRpcModDim    =[Q('20.0cm'),Q('10.0cm'),Q('1.5cm')]
actResiplateDim =[Q('19.6cm'),Q('9.6cm'),Q('0.3cm')]
actStripxDim     =[Q('0.765cm'),Q('9.6cm'),Q('0.35cm')]
actStripyDim     =[Q('19.6cm'),Q('0.75cm'),Q('0.35cm')]
#actRpcModDim    =[Q('600cm'),Q('600cm'),Q('1.5cm')]
#actResiplateDim =[Q('596cm'),Q('596cm'),Q('0.3cm')]
#actStripxDim     =[Q('0.765cm'),Q('596cm'),Q('0.35cm')]
#actStripyDim     =[Q('596cm'),Q('0.75cm'),Q('0.35cm')]
actGas_gap      =Q('0.2cm')
actRpcModMat          = 'Air'
actResiplateMat       = 'Bakelite'
actGasMat             = 'rpcGas'
actRpcReadoutMat      = 'Honeycomb'
Sensitive             = 'RPCPad'


# Loading the RPC SubDetector
[RPCMod]
subbuilders   = ['RPCPad']
class = duneggd.Component.RPCMod.RPCModBuilder
compRpcModDim  = {RPCPad:actRpcModDim}
compGas_gap      ={RPCPad:actGas_gap}
compResiplateDim =[Q('19.6cm'),Q('9.6cm'),Q('0.3cm')]
compStripxDim     =[Q('0.765cm'),Q('9.6cm'),Q('0.35cm')]
compStripyDim     =[Q('19.6cm'),Q('0.75cm'),Q('0.35cm')]
#compRpcModDim    =[Q('500cm'),Q('600cm'),Q('1.5cm')]
#compResiplateDim =[Q('496cm'),Q('596cm'),Q('0.3cm')]
#compStripxDim     =[Q('0.765cm'),Q('596cm'),Q('0.35cm')]
#compStripyDim     =[Q('596cm'),Q('0.75cm'),Q('0.35cm')]
compRotPlaneEven  ='noRotate'
compRotPlaneOdd   ='r90aboutZ'

# Yse RPC SubDetector to constitue RPC tray
# There are 5 different Tray configurations, they have different sizes to be chosen
[RPCTray_End]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('60cm'), Q('20cm'), Q('1.5cm')]
compDimension =[Q('400cm'), Q('400cm'), Q('1.5cm')]
compMaterial ='Air'
#compNrpcCol = 3
#compNrpcRow = 2
compNrpcCol = 10
compNrpcRow = 20
compRotation = 'noRotate'

[RPCTray_BarBig]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('400cm'), Q('310cm'), Q('4.0cm')]
compDimension =[Q('600cm'), Q('400cm'), Q('4.0cm')]
compMaterial ={RPCTray_End:compMaterial}
#compNrpcCol = 2
#compNrpcRow = 3
compNrpcCol = 29
compNrpcRow = 39
compRotation = 'noRotate'

[RPCTray_BarMidS]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('400cm'), Q('280cm'), Q('4.0cm')]
compDimension =[Q('6000cm'), Q('1000cm'), Q('4.0cm')]
compMaterial ={RPCTray_End:compMaterial}
#compNrpcCol = 2
#compNrpcRow = 3
compNrpcCol = 18
compNrpcRow = 9
compRotation  = 'noRotate'

[RPCTray_BarMidF]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('400cm'), Q('250cm'), Q('4.0cm')]
compDimension =[Q('6000cm'), Q('1000cm'), Q('4.0cm')]
compMaterial ={RPCTray_End:compMaterial}
#compNrpcCol = 2
#compNrpcRow = 3
compNrpcCol = 18
compNrpcRow = 9
compRotation = 'noRotate'

[RPCTray_BarSmall]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('400cm'), Q('220cm'), Q('4.0cm')]
compDimension =[Q('6000cm'), Q('1000cm'), Q('4.0cm')]
compMaterial ={RPCTray_End:compMaterial}
#compNrpcCol = 2
#compNrpcRow = 3
compNrpcCol = 18
compNrpcRow = 9
compRotation = 'noRotate'


#Loading MuID barrel SubDetector
[MuIDBarrel]
subbuilders = ['RPCTray_BarSmall','RPCTray_BarMidF','RPCTray_BarMidS','RPCTray_BarBig']
#subbuilders = ['RPCTray_End']
class = duneggd.SubDetector.MuIDBarrel.MuIDBarrelBuilder
# Temp numbers:
modMagThickness = Q('50cm')
modMagSize = Q('500cm')
#magInDim   = [Q('4.5m'),Q('4m'),Q('7.2m')]
modMagInDim   = [Q('6m'),Q('6m'),Q('12m')]
# According to design numbers, should be:
#magThickness = Q('60cm')
#magInDim   = [ Q('4.5m'),Q('3.8m'),Q('6.8m')]
   # not the same as CDR inner dimensions
   # set so that inner dim of MuIDBarrel are 4.5 x 5 x 8
modSteelPlateThickness = Q('10cm')
modGap_tworpctrays=Q('10cm')
modAir_gap=Q('5cm')
modMuidInDim = [modMagInDim[0]+2*modMagThickness, modMagInDim[1]+2*modMagThickness, modMagInDim[2]+2*modMagThickness] #outer dim of magnet

#Loading MuID upstream SubDetector
[MuIDUpstream]
subbuilders = ['RPCTray_End']
class = duneggd.SubDetector.MuIDEnd.MuIDEndBuilder
modMuidDim = [Q('400cm'), Q('400cm'), Q('64.5cm')]
modSteelPlateDim = [Q('400cm'), Q('400cm'), Q('20cm')]
modNTraysPerPlane = 1
modNPlanes =  3
modMuidMat = 'Steel'
modMuidRot = 'noRotate'

#Loading MuID downstream SubDetector
[MuIDDownstream]
subbuilders = ['RPCTray_End']
class = duneggd.SubDetector.MuIDEnd.MuIDEndBuilder
modMuidDim = [Q('400cm'), Q('400cm'), Q('64.5cm')]
modSteelPlateDim = [Q('400cm'), Q('400cm'), Q('20cm')]
modNTraysPerPlane = 1
modNPlanes =  3
modMuidMat = {MuIDUpstream:modMuidMat}
modMuidRot = 'noRotate'
