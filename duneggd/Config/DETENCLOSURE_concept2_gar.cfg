# How to run, from the dunendggd directory:
# gegede-cli  duneggd/Config/KLOE.cfg duneggd/Config/KLOESTT.cfg \
# duneggd/Config/DETENCLOSURE_concept1_all.cfg \
# duneggd/Config/ArgonCube/ArgonCubeDetector.cfg \
# duneggd/Config/ArgonCube/*.cfg duneggd/Config/WORLDggd.cfg -w World -o example.gdml

[DetEnclosure]
class               = duneggd.DetEnc.DetEncBuilder
Material            = 'Air'
# Mike Kordosky: dimension choosen here to exactly match
# the hall used by the ND task force  (site.xml)
halfDimension       = {'dx':Q('899.16cm'),'dy':Q('768.096cm'),'dz':Q('1501.61625cm')}

####Comment in or out the following sections to switch from IronDipole to KLOE
######## Argon Cube + IronDipole
subbuilders         = ['ArgonCubeDetector','IronDipole']

### v5 positions (move to agree with NDTF beam in hall)
Positions	    = [	[ Q("0m"), Q("-200.0cm"), Q("-480.3cm") ],
	              [ Q("0m"), Q("-198.3cm"), Q("220.4cm") ] ,
	              [ Q("0m"), Q("0m"), Q("0m") ] ]

Rotations	    = [	[ Q("0deg"), Q("0deg"), Q("0deg") ],
		      	[ Q("0deg"), Q("0deg"), Q("0deg") ] ,
		      	[ Q("0deg"), Q("0deg"), Q("0deg") ] ]

####### Argon Cube + KLOE
#subbuilders         = ['ArgonCubeDetector','KLOE']
### v3 positions
#Positions	    = [	[ Q("0m"), Q("-132.8cm"), Q("-425.6cm") ],
#	              [ Q("0m"), Q("-208.8cm"), Q("324.4cm") ] ,
#	              [ Q("0m"), Q("0m"), Q("0m") ] ]

### v2 positions
#Positions	    = [	[ Q("0m"), Q("-311.0cm"), Q("-389.6cm") ],
#	              [ Q("0m"), Q("-387.0cm"), Q("360.3cm") ] ,
#	              [ Q("0m"), Q("0m"), Q("0m") ] ]

#Rotations	    = [	[ Q("0deg"), Q("0deg"), Q("0deg") ],
#		      	[ Q("0deg"), Q("90deg"), Q("0deg") ] ,
#		      	[ Q("0deg"), Q("0deg"), Q("0deg") ] ]

[IronDipole]
class = duneggd.Det.IronDipole.IronDipoleBuilder
#subbuilders = ['MuIDBarrel', 'MuIDDownstream', 'MuIDUpstream', 'ECALDownstream', 'ECALUpstream', 'ECALBarrel', 'Magnet']
#subbuilders = ['Magnet','ECALDownstream', 'ECALBarrel','ECALUpstream','STT','A3DST','GArTPC']
subbuilders = ['Magnet','ECALDownstream','ECALUpstream','ECALTop','ECALBot','ECALRight','ECALLeft','A3DST','GArTPC']
#subbuilders = ['Magnet']
innerDetBField =  ("0.4 T, 0.0 T, 0.0 T")




###### ECAL positioning
# Many numbers here depend on numbers below
# Unfortuantely, I can't make the lines like this one work: below work
#ecalDnZ={Magnet:actDimension}[0]/2.0-{ECALDownstream:modEcalThickness} -Q("0.5cm")
ecalDnZ=Q("562cm")/2.0-Q("70.5cm")/2.0-Q("0.5cm") # number here depend on numbers below...
ecalDnPos  = [Q('0.cm'),Q('0.cm'),ecalDnZ]
eaclDownRot='noRotate'

ecalUpZ=-Q("562cm")/2.0+Q("21.6cm")/2.0+Q("0.5cm") # number here depend on numbers below...
ecalUpPos  = [Q('0.cm'),Q('0.cm'),ecalUpZ]
eaclUpRot = 'r180aboutY'

ecalTBLRZ = Q("-20cm")
ecalTopY=Q("513cm")/2.0-Q("21.6cm")/2.0-Q("0.5cm")
ecalTopPos = [Q('0.cm'),ecalTopY,ecalTBLRZ]
ecalTopRot = 'r90aboutX'

ecalBotY=-Q("513cm")/2.0+Q("21.6cm")/2.0+Q("0.5cm")
ecalBotPos = [Q('0.cm'),ecalBotY,ecalTBLRZ]
ecalBotRot = 'rminus90aboutX'

ecalRightX=-Q("545cm")/2.0+Q("21.6cm")/2.0+Q("0.5cm")
ecalRightPos = [ecalRightX,Q('0.cm'),ecalTBLRZ]
ecalRightRot = 'rminus90aboutY'

ecalLeftX=+Q("545cm")/2.0-Q("21.6cm")/2.0-Q("0.5cm")
ecalLeftPos = [ecalLeftX,Q('0.cm'),ecalTBLRZ]
ecalLeftRot = 'r90aboutY'


### alternative ECALBarrelBuilder
ecalBaPos  = [Q("0cm"),Q("0cm"),Q('0.cm')]
eaclBarRot ='noRotate'



magPos     = [Q('0.cm'),Q('0.cm'),Q('0.cm')]

##### Dipole STT, 3DST and GArTPC
buildSTT=False # True builds STT
# Nov 17 CERN workshop
STTPos = [Q("0cm"),Q("0cm"),Q("25.5cm")]
# After workshop (location along z is a little arbitrary, chosen by eye)
STTPos = [Q("0cm"),Q("0cm"),Q("-30cm")]

buildA3DST=False
A3DSTPos = [Q("0cm"),Q("0cm"),Q("-284cm")] #3DSTPos is an illegal label in python --> leads with a number

buildGArTPC=True # if STT is true probably want to set this to False
GArTPCPos = [Q("0cm"),Q("0cm"),Q("-24.8cm")]
# GArTPCRot needs to be changed to agree with direction of {GArTPC:Drift}
GArTPCRot = [Q("0deg"),Q("90deg"),Q("0deg")] # for cylinder axis along x
#GArTPCRot = [Q("0deg"),Q("0deg"),Q("0deg")] # for cylinder axis along z

#muidUpRot='noRotate'
#muidDownRot='r180aboutY'
#muidUpRot='noRotate'


###############################
# Dipole Magnet
###############################
[Magnet]
# see lbne doc-10942
class         = duneggd.SubDetector.Magnet.MagnetBuilder
actDimension  = [Q('108.5cm'),Q('513cm'),Q('562cm')] # inner coil dimensions, one segment
actDimensionB = [Q('545cm'),Q('563cm'),Q('112cm')] # inner yoke dimensions, one segment
actThickness  = Q('25cm') # thickness of the coil
actThicknessB = Q('60cm') # thickness of the yoke iron
# this is just the iron now, real design has 10cm plates with 5cm gaps, total 85cm thick
Location      = [Q('0.cm'),Q('0.cm'),Q('0.cm')]
nMag          = 5 # number of coil segments (segmented along x)
nMagB         = 5 # number of yoke segments (segmented along z)
magGap        = Q('0.5cm') # gap between coil segments (adds some length along x)
magBGap       = Q('0.5cm') # gap between yoke segments (adds some length along z)
actMaterial   = 'MagnetCoil' # coil is made of a copper water mix
actMaterialB  = 'Iron'

##############################################
#ECAL with scintillator
##############################################

#Loading scintillator bar part in Active
[SB] # these are not actually made but the dimensions are used by SBPlane
class              = duneggd.Active.RectBarHalf.RectBarBuilder
actDimension       = [Q('2.5cm'), Q('3.2m'), Q('1cm')] # nominal dimensions of a scintillator bar
actMaterial        = 'Scintillator'
Sensitive          = 'SB'

# Loading the scintillator bar plane
[SBPlane]
subbuilders        = ['SB'] # doesn't use it.
class              = duneggd.Component.Plane.SBPlaneBuilder
compNElements         = 128
compDimension        = {SB:actDimension}
compSBPlaneMat         = 'epoxy_resin'
compScintBarMat        = 'Scintillator'
compRotation   = 'noRotate'

[SBPlaneDS]
subbuilders        = ['SB'] # doesn't use it.
specificName = 'DS'
class              = duneggd.Component.Plane.SBPlaneBuilder
compNElements         = 184
compDimension        = [Q('2.5cm'), Q('4.6m'), Q('1cm')]
compSBPlaneMat         = 'epoxy_resin'
compScintBarMat        = 'Scintillator'
compRotation   = 'noRotate'

[SBPlaneUS]
subbuilders        = ['SB'] # doesn't use it.
specificName = 'US'
class              = duneggd.Component.Plane.SBPlaneBuilder
compNElements         = 184
compDimension        = [Q('2.5cm'), Q('4.6m'), Q('1cm')]
compSBPlaneMat         = 'epoxy_resin'
compScintBarMat        = 'Scintillator'
compRotation   = 'noRotate'

#Loading downstream ECAL
[ECALDownstream]
subbuilders   = ['SBPlaneDS']
class         = duneggd.SubDetector.ECALMod.ECALModBuilder
# this builder makes a big block of lead and then displaces some of it with scintillator planes :(
modEcalMat       = 'Lead'
modScintMat      = 'Scintillator'
modEcalThickness = Q('70.5cm')
modLeadThickness = Q('1.75mm')
modNElements  = 60
zXtra            = Q('0mm') #what for? looks like an offset to move planes around inside of lead
# set to width of one lead plate to try and make a lead plate upstream of first scintillator plane
modRotPlaneOdd = 'r90aboutZ' # make odd planes measure y (strips run along x), even planes measure x


#Loading upstream ECAL based on downstream ECAL
[ECALUpstream]
subbuilders   = ['SBPlaneUS']
class         = {ECALDownstream:class}
modEcalMat       = {ECALDownstream:modEcalMat}
modScintMat      = {ECALDownstream:modScintMat}
modEcalThickness = Q('21.6cm')
modLeadThickness = Q('3.5mm')
modNElements  = 16
zXtra=Q("0cm")
#nSBPlanes      = 1
#able to add "modRotPlaneEven" or "modRotPlaneEven"
modRotPlaneOdd = 'r90aboutZ' # make odd planes measure y (strips run along x), even planes measure x

### make individual top and bottom ecal modules
[SBPlaneTopBot]
subbuilders        = ['SB'] # doesn't use it.
specificName = 'TB'
class              = duneggd.Component.Plane.SBPlaneBuilder
compNElements         = 200
compDimension        =  [Q('2.5cm'), Q('5.0m'), Q('1cm')]
compSBPlaneMat         = 'epoxy_resin'
compScintBarMat        = 'Scintillator'
compRotation   = 'noRotate'

#Loading upstream ECAL based on downstream ECAL
[ECALTop]
subbuilders   = ['SBPlaneTopBot']
class         = {ECALDownstream:class}
modEcalMat       = {ECALDownstream:modEcalMat}
modScintMat      = {ECALDownstream:modScintMat}
modEcalThickness = Q('21.6cm')
modLeadThickness = Q('3.5mm')
modNElements  = 16
zXtra=Q("0cm")
#nSBPlanes      = 1
#able to add "modRotPlaneEven" or "modRotPlaneEven"
modRotPlaneOdd = 'r90aboutZ' # make odd planes measure y (strips run along x), even planes measure x

#Loading upstream ECAL based on downstream ECAL
[ECALBot]
subbuilders   = ['SBPlaneTopBot']
class         = {ECALDownstream:class}
modEcalMat       = {ECALDownstream:modEcalMat}
modScintMat      = {ECALDownstream:modScintMat}
modEcalThickness = Q('21.6cm')
modLeadThickness = Q('3.5mm')
modNElements  = 16
zXtra=Q("0cm")
#nSBPlanes      = 1
#able to add "modRotPlaneEven" or "modRotPlaneEven"
modRotPlaneOdd = 'r90aboutZ' # make odd planes measure y (strips run along x), even planes measure x


### make individual left and right ecal modules
[SBPlaneLR]
subbuilders        = ['SB'] # doesn't use it.
specificName = 'LR'
class              = duneggd.Component.Plane.SBPlaneBuilder
compNElements         = 200
compDimension        =  [Q('2.5cm'), Q('5.0m'), Q('1cm')]
compSBPlaneMat         = 'epoxy_resin'
compScintBarMat        = 'Scintillator'
compRotation   = 'noRotate'

#Loading upstream ECAL based on downstream ECAL
[ECALRight]
subbuilders   = ['SBPlaneLR']
class         = {ECALDownstream:class}
modEcalMat       = {ECALDownstream:modEcalMat}
modScintMat      = {ECALDownstream:modScintMat}
modEcalThickness = Q('21.6cm')
modLeadThickness = Q('3.5mm')
modNElements  = 16
zXtra=Q("0cm")
modRotPlaneOdd = 'r90aboutZ' # make odd planes measure y (strips run along x), even planes measure x

#Loading upstream ECAL based on downstream ECAL
[ECALLeft]
subbuilders   = ['SBPlaneLR']
class         = {ECALDownstream:class}
modEcalMat       = {ECALDownstream:modEcalMat}
modScintMat      = {ECALDownstream:modScintMat}
modEcalThickness = Q('21.6cm')
modLeadThickness = Q('3.5mm')
modNElements  = 16
zXtra=Q("0cm")
modRotPlaneOdd = 'r90aboutZ' # make odd planes measure y (strips run along x), even planes measure x



### alternative way of making the barrel with ECALBarrelBuilder
### assumes all modules are the same
### check IronDipole's list of builders above to see if this is enabled
#Loading ECal barrel SubDetector based on downstream ECAL
[ECALBarrelMod]
subbuilders    = ['SBPlaneBA']
class          = {ECALDownstream:class}
modEcalMat        = {ECALDownstream:modEcalMat}
modScintMat       = {ECALDownstream:modScintMat}
modEcalThickness  = {ECALUpstream:modEcalThickness}
modLeadThickness  = {ECALUpstream:modLeadThickness}
modNElements      = {ECALUpstream:modNElements}
zXtra             = Q('0m')
modAltPlaneOrient = False
#able to add "modRotPlaneEven" or "modRotPlaneEven"

#Loading ECal barrel based on ECal barrel SubDetector
[ECALBarrel]
class            = duneggd.SubDetector.ECALBarrel.ECALBarrelBuilder
subbuilders      = ['ECALBarrelMod'] # stt so the SubDetectors can be placed around stt dim
modEcalMat          = 'Air'
modScintMat         = {ECALDownstream:modScintMat}
#modSTubeEndsToLead  = Q('8cm')
modSTubeEndsToLead  = Q('0cm')
# MAK: modInnerDimension is the inner dimension of the ecal barrel
# It's not an ideal choice...
# The outer dimension is what actually has to fit inside the magnet...
# Also, confusingly, this ends up being called "sttDimension" in the code
modInnerDimension     = [Q('545cm')-{ECALBarrelMod:modEcalThickness}*2,Q('513cm')-{ECALBarrelMod:modEcalThickness}*2,Q('562cm')] # ends up being sttDimension in code...




#############################################
# 3DST
############################################
[A3DST]
class               = duneggd.SubDetector.SimpleSubDetector.SimpleSubDetectorBuilder
subbuilders         = ['3DPlane']
halfDimension       = {'dx':Q('100cm'),'dy':Q('100cm'),'dz':Q('50cm')}
Material            = 'Air'
NElements           = 100
TranspV             = [0,0,1]

[3DPlane]
class               = duneggd.SubDetector.SimpleSubDetector.SimpleSubDetectorBuilder
subbuilders         = ['3DRow']
halfDimension       = {'dx':Q('100cm'),'dy':Q('100cm'),'dz':Q('0.5cm')}
Material            = 'Air'
NElements           = 200
TranspV             = [0,-1,0]

[3DRow]
class               = duneggd.Component.SingleArrangePlane.SingleArrangePlaneBuilder
subbuilders         = ['3DRectBar']
halfDimension       = {'dx':Q('100cm'),'dy':Q('0.5cm'),'dz':Q('0.5cm')}
Material            = 'Air'
NElements           = 200
TranspV             = [-1,0,0]

[3DRectBar]
class               = duneggd.Active.RectBar.RectBarBuilder
Material            = 'Scintillator'
halfDimension       = {'dx':Q('0.5cm'),'dy':Q('0.5cm'),'dz':Q('0.5cm')}
AuxParams           = {"SensDet":"3DScint"}

######################################################
# GArTPC
######################################################
[GArTPC]
class               = duneggd.SubDetector.GArTPC.GArTPCBuilder
subbuilders         = []
halfDimension       = {'rmin':Q('0mm'),'rmax':Q('234cm'),'dz':Q('249cm')}
# having a dx in the Dimension makes it a rectangular TPC with half dimensions dx,dy,dz
# else assume it's a cylinder with dimensions r and dz
tpcDimension        = {'r':Q('230cm'),'dz':Q('246cm')} # dimensions of the two of these
chamberDimension    = { 'r':Q('234cm'),'dz':Q('498cm') }
drift               = 'z'
BField              = None
GasType            = 'HP_ArCO2'
#GasType            = 'NoGas'



##############################################
#RPC MuID
##############################################

#Loading RPC part in Active
[RPCPad]
class              = duneggd.Active.RPCPad.RPCPadBuilder
actRpcModDim    =[Q('20.0cm'),Q('10.0cm'),Q('1.5cm')]
actResiplateDim =[Q('19.6cm'),Q('9.6cm'),Q('0.3cm')]
actStripxDim     =[Q('0.765cm'),Q('9.6cm'),Q('0.35cm')]
actStripyDim     =[Q('19.6cm'),Q('0.75cm'),Q('0.35cm')]
#actRpcModDim    =[Q('600cm'),Q('600cm'),Q('1.5cm')]
#actResiplateDim =[Q('596cm'),Q('596cm'),Q('0.3cm')]
#actStripxDim     =[Q('0.765cm'),Q('596cm'),Q('0.35cm')]
#actStripyDim     =[Q('596cm'),Q('0.75cm'),Q('0.35cm')]
actGas_gap      =Q('0.2cm')
actRpcModMat          = 'Air'
actResiplateMat       = 'Bakelite'
actGasMat             = 'rpcGas'
actRpcReadoutMat      = 'Honeycomb'
Sensitive             = 'RPCPad'


# Loading the RPC SubDetector
[RPCMod]
subbuilders   = ['RPCPad']
class = duneggd.Component.RPCMod.RPCModBuilder
compRpcModDim  = {RPCPad:actRpcModDim}
compGas_gap      ={RPCPad:actGas_gap}
compResiplateDim =[Q('19.6cm'),Q('9.6cm'),Q('0.3cm')]
compStripxDim     =[Q('0.765cm'),Q('9.6cm'),Q('0.35cm')]
compStripyDim     =[Q('19.6cm'),Q('0.75cm'),Q('0.35cm')]
#compRpcModDim    =[Q('500cm'),Q('600cm'),Q('1.5cm')]
#compResiplateDim =[Q('496cm'),Q('596cm'),Q('0.3cm')]
#compStripxDim     =[Q('0.765cm'),Q('596cm'),Q('0.35cm')]
#compStripyDim     =[Q('596cm'),Q('0.75cm'),Q('0.35cm')]
compRotPlaneEven  ='noRotate'
compRotPlaneOdd   ='r90aboutZ'

# Yse RPC SubDetector to constitue RPC tray
# There are 5 different Tray configurations, they have different sizes to be chosen
[RPCTray_End]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('60cm'), Q('20cm'), Q('1.5cm')]
compDimension =[Q('400cm'), Q('400cm'), Q('1.5cm')]
compMaterial ='Air'
#compNrpcCol = 3
#compNrpcRow = 2
compNrpcCol = 10
compNrpcRow = 20
compRotation = 'noRotate'

[RPCTray_BarBig]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('400cm'), Q('310cm'), Q('4.0cm')]
compDimension =[Q('600cm'), Q('400cm'), Q('4.0cm')]
compMaterial ={RPCTray_End:compMaterial}
#compNrpcCol = 2
#compNrpcRow = 3
compNrpcCol = 29
compNrpcRow = 39
compRotation = 'noRotate'

[RPCTray_BarMidS]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('400cm'), Q('280cm'), Q('4.0cm')]
compDimension =[Q('6000cm'), Q('1000cm'), Q('4.0cm')]
compMaterial ={RPCTray_End:compMaterial}
#compNrpcCol = 2
#compNrpcRow = 3
compNrpcCol = 18
compNrpcRow = 9
compRotation  = 'noRotate'

[RPCTray_BarMidF]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('400cm'), Q('250cm'), Q('4.0cm')]
compDimension =[Q('6000cm'), Q('1000cm'), Q('4.0cm')]
compMaterial ={RPCTray_End:compMaterial}
#compNrpcCol = 2
#compNrpcRow = 3
compNrpcCol = 18
compNrpcRow = 9
compRotation = 'noRotate'

[RPCTray_BarSmall]
subbuilders = ['RPCMod']
class = duneggd.Component.RPCTray.RPCTrayBuilder
#compDimension =[Q('400cm'), Q('220cm'), Q('4.0cm')]
compDimension =[Q('6000cm'), Q('1000cm'), Q('4.0cm')]
compMaterial ={RPCTray_End:compMaterial}
#compNrpcCol = 2
#compNrpcRow = 3
compNrpcCol = 18
compNrpcRow = 9
compRotation = 'noRotate'


#Loading MuID barrel SubDetector
[MuIDBarrel]
subbuilders = ['RPCTray_BarSmall','RPCTray_BarMidF','RPCTray_BarMidS','RPCTray_BarBig']
#subbuilders = ['RPCTray_End']
class = duneggd.SubDetector.MuIDBarrel.MuIDBarrelBuilder
# Temp numbers:
modMagThickness = Q('50cm')
modMagSize = Q('500cm')
#magInDim   = [Q('4.5m'),Q('4m'),Q('7.2m')]
modMagInDim   = [Q('6m'),Q('6m'),Q('12m')]
# According to design numbers, should be:
#magThickness = Q('60cm')
#magInDim   = [ Q('4.5m'),Q('3.8m'),Q('6.8m')]
   # not the same as CDR inner dimensions
   # set so that inner dim of MuIDBarrel are 4.5 x 5 x 8
modSteelPlateThickness = Q('10cm')
modGap_tworpctrays=Q('10cm')
modAir_gap=Q('5cm')
modMuidInDim = [modMagInDim[0]+2*modMagThickness, modMagInDim[1]+2*modMagThickness, modMagInDim[2]+2*modMagThickness] #outer dim of magnet

#Loading MuID upstream SubDetector
[MuIDUpstream]
subbuilders = ['RPCTray_End']
class = duneggd.SubDetector.MuIDEnd.MuIDEndBuilder
modMuidDim = [Q('400cm'), Q('400cm'), Q('64.5cm')]
modSteelPlateDim = [Q('400cm'), Q('400cm'), Q('20cm')]
modNTraysPerPlane = 1
modNPlanes =  3
modMuidMat = 'Steel'
modMuidRot = 'noRotate'

#Loading MuID downstream SubDetector
[MuIDDownstream]
subbuilders = ['RPCTray_End']
class = duneggd.SubDetector.MuIDEnd.MuIDEndBuilder
modMuidDim = [Q('400cm'), Q('400cm'), Q('64.5cm')]
modSteelPlateDim = [Q('400cm'), Q('400cm'), Q('20cm')]
modNTraysPerPlane = 1
modNPlanes =  3
modMuidMat = {MuIDUpstream:modMuidMat}
modMuidRot = 'noRotate'
